%!PS-Adobe-2.0
%%Creator: dvips(k) 5.998 Copyright 2018 Radical Eye Software
%%Title: 00-00-1.dvi
%%CreationDate: Wed Aug  1 00:43:36 2018
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: CMMI10 CMSS8 CMR7
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: /usr/local/texlive/2018/bin/x86_64-linux/dvips -o
%+ 00-00-1.ps 00-00-1.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2018.07.31:1907
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 698 2017-12-30 19:08:50Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.28, 2017/12/30
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (origimal)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 395 2017-03-21 09:24:38Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-3dplot.pro 0 0
%% $Id: pst-3dplot.pro 401 2017-04-05 06:57:36Z herbert $
%%
%% This is file `pst-3dplot.pro',
%%
%% IMPORTANT NOTICE:
%%
%% Package `pst-3dplot.tex'
%%
%% Herbert Voss <voss _at_ PSTricks.de>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% DESCRIPTION:
%%   `pst-3dplot' is a PSTricks package to draw 3d curves and graphical objects
%%
%%
%% version 0.33 / 2017-04-05  Herbert Voss <hvoss _at_ tug.org>
%% with contributions of Darrell Lamm <darrell.lamm _at_ gtri.gatech.edu<
%%            
%
/tx@3DPlotDict 200 dict def
tx@3DPlotDict begin
%
/printDot { gsave 2 copy 2 0 360 arc fill stroke grestore } def
%
/saveCoor { 
  dzUnit mul /z ED
  dyUnit mul /y ED
  dxUnit mul /x ED
} def
%
/3Dto2D { % true or false on stack
  { RotatePoint } if
  1 { %  dummy loop, will run only 1 time, allows exit 
    coorType 0 le {                                               % the default |
      /x2D x leftHanded not { neg } if Alpha cos mul y Alpha sin mul add def %  /\  co system
      /y2D x leftHanded { neg } if Alpha sin mul y Alpha cos mul add neg Beta sin mul z Beta cos mul add def
      exit } if
    coorType 1 le { 
      /x2D y x Alpha 90 sub sin mul sub def  %  |/_  co system, no shortened x axis
      /y2D z x Alpha 90 sub cos mul sub def 
      exit } if
    coorType 2 le { % coorType |/_ with a 1/sqrt(2) shortend x-axis and 135 degrees 
      /x2D y x 0.5 mul sub def
      /y2D z x 0.5 mul sub def 
      exit } if
    coorType 3 le { % coorType |/_ with a 1/sqrt(2) shortend x-axis and 135 degrees 
      /x2D y x -0.5 mul sub def
      /y2D z x -0.5 mul sub def 
      exit } if
    coorType 4 le { % Normalbild in Trimetrie Skalierung so, dass coorType2
       /x2D x -0.5 mul y 1 mul add def
       /y2D x -0.5 mul y -0.25 mul add z 1 mul add def
       exit } if
    coorType 5 le { % coorType |/_ with a 1/2 shortend x-axis and 135 degrees 
      /x2D x z 0.5 mul Alpha cos mul add def
      /y2D y z 0.5 mul Alpha sin mul add def 
      exit } if
    coorType 6 le { % coorType |/_ with a 1/2 shortend x-axis and 135 degrees and z into the front
      /x2D y x -0.559 mul Alpha cos mul add def
      /y2D z x -0.559 mul Alpha sin mul add def 
      exit } if
    coorType 7 le { % coorType |/_ with a 1/2 shortend x-axis and 135 degrees and z into the front
      /x2D y x -0.5 mul Alpha cos mul add def
      /y2D z x -0.5 mul Alpha sin mul add def 
      exit } if
  } repeat
} def
/ConvertTo2D { true 3Dto2D } def
/ConvertTo2DWithoutRotating { false 3Dto2D } def
%
/Conv3D2D { /z ED /y ED /x ED ConvertTo2D x2D y2D } def
%
/ConvertToCartesian {
  /latitude exch def
  /longitude exch def
  /Radius exch def
  1 { %  dummy loop, will run only 1 time, allows exit
    SphericalCoorType 0 le {                                               % the default |
     /z { Radius latitude sin mul } def
     /x { Radius longitude cos mul latitude cos mul } def
     /y { Radius longitude sin mul latitude cos mul } def
      exit } if
    SphericalCoorType 2 le {
     /z { Radius longitude cos mul } def
     /x { Radius longitude sin mul latitude cos mul} def
     /y { Radius longitude sin mul latitude sin mul } def
      exit } if
  } repeat
} def
%
/ConvCylToCartesian { % r phi h -> x y z
  3 1 roll			% h r phi
  /Phi ED
  /Radius ED			% h->z on stack
  Radius Phi cos mul exch 	% x z
  Radius Phi sin mul exch	% x y z
} def
%
/SphericalTo2D {
  x y z ConvertToCartesian ConvertTo2D
} def
%
/CylinderTo2D { %  r phi h
  x y z ConvCylToCartesian ConvertTo2D
} def
%
/convertStackTo2D {
  counttomark
  /n ED /n3 n 3 div cvi def
  n3 {
    n -3 roll
    SphericalCoor { ConvertToCartesian } { saveCoor } ifelse
    ConvertTo2D
    x2D xUnit y2D yUnit
    /n n 1 sub def
  } repeat
} def
%
% the angle in the parameter equation for an ellipse is not proportional to the real angle!
% phi=atan(b*tan(angle)/a)+floor(angle/180+0.5)*180
%
/getPhi { % on stack: vecA vecB angle 
  3 dict begin
  /angle exch def /vecB exch def /vecA exch def
  angle cvi 90 mod 0 eq { angle } { vecA angle tan mul vecB atan 
  angle 180 div .5 add floor 180 mul add } ifelse 
  end
} def
%
/RotSet (set ) def
%
/eulerRotation false def
% Matrix multiplication procedure
/matmul {

  /M@tMulDict 20 dict def
  M@tMulDict begin
  /m2 ED
  /m1 ED
  m1 dup length 2 sub 2 getinterval aload pop
  /col1max ED
  /row1max ED
  m2 dup length 2 sub 2 getinterval aload pop
  /col2max ED
  /row2max ED
  /m3 row1max col2max mul 2 add array def
  m3 dup length 2 sub row1max col2max 2 array astore putinterval
  0 1 row1max 1 sub {
   /row ED
   0 1 col2max 1 sub {
    /col ED
    /sum 0 def
    0 1 col1max 1 sub{
    /rowcol ED
    sum
    m1 row col1max mul rowcol add get
    m2 rowcol col2max mul col add get
    mul add 
    /sum ED
    } for
    m3 row col2max mul col add sum put
   } for
  } for
  m3
  end % end of M@tMulDict

} def
%
/SetMQuaternion {

  /MnewTOold 11 array def

  /Qu@ternionDict 30 dict def
  Qu@ternionDict begin

  /normRotVec  xRotVec yRotVec zRotVec 3 array astore VecNorm  def
  normRotVec 0 gt
  {/xRotVecNorm xRotVec normRotVec div def
   /yRotVecNorm yRotVec normRotVec div def
   /zRotVecNorm zRotVec normRotVec div def
   RotAngle}
  {/xRotVecNorm 1 def
   /yRotVecNorm 0 def
   /zRotVecNorm 0 def 
   0} ifelse

  2 div dup
  /q0 exch cos def
      sin dup dup
  /q1 exch xRotVecNorm mul def
  /q2 exch yRotVecNorm mul def
  /q3 exch zRotVecNorm mul def

  /q0q0 q0 q0 mul def
  /q0q1 q0 q1 mul def
  /q0q2 q0 q2 mul def
  /q0q3 q0 q3 mul def

  /q1q1 q1 q1 mul def
  /q1q2 q1 q2 mul def
  /q1q3 q1 q3 mul def

  /q2q2 q2 q2 mul def
  /q2q3 q2 q3 mul def

  /q3q3 q3 q3 mul def

  MnewTOold 0 q0q0 q1q1 add q2q2 sub q3q3 sub put
  MnewTOold 1 q1q2 q0q3 sub 2 mul put
  MnewTOold 2 q1q3 q0q2 add 2 mul put

  MnewTOold 3 q1q2 q0q3 add 2 mul put
  MnewTOold 4 q0q0 q1q1 sub q2q2 add q3q3 sub put
  MnewTOold 5 q2q3 q0q1 sub 2 mul put

  MnewTOold 6 q1q3 q0q2 sub 2 mul put
  MnewTOold 7 q2q3 q0q1 add 2 mul put
  MnewTOold 8 q0q0 q1q1 sub q2q2 sub q3q3 add put

  MnewTOold 9 3 put
  MnewTOold 10 3 put

  end % end of Qu@ternionDict

} def
%
/SetMxyz {
  1.0 0.0 0.0  0.0 1.0 0.0  0.0 0.0 1.0  3 3  11 array astore /MnewTOold ED
  RotSequence cvx exec % Now create a new MnewTOold using xyz, etc.
} def
%
/ConcatMQuaternion {
  MnewTOold % Push onto stack
  SetMQuaternion % Uses [xyz]RotVec and RotAngle to make MnewToOld 
  MnewTOold matmul /MnewTOold ED
} def
%
/ConcatMxyz {
  MnewTOold % Push onto stack
  SetMxyz % Uses RotX, etc. to set MnewTOold 
  MnewTOold matmul /MnewTOold ED
} def
%
/RotatePoint{
  MnewTOold x y z  3 1  5 array astore matmul
  0 3 getinterval aload pop 
  /z ED 
  /y ED 
  /x ED 
} def
%
/makeMoldTOnew {
  /MoldTOnew 11 array def
  MoldTOnew 0 MnewTOold 0 get put
  MoldTOnew 1 MnewTOold 3 get put
  MoldTOnew 2 MnewTOold 6 get put
  MoldTOnew 3 MnewTOold 1 get put
  MoldTOnew 4 MnewTOold 4 get put
  MoldTOnew 5 MnewTOold 7 get put
  MoldTOnew 6 MnewTOold 2 get put
  MoldTOnew 7 MnewTOold 5 get put
  MoldTOnew 8 MnewTOold 8 get put
  MoldTOnew 9               3 put
  MoldTOnew 10              3 put
} def
%
/RotXaxis { 
  eulerRotation 
  {1 0 0}
  {makeMoldTOnew MoldTOnew  1 0 0  3 1  5 array astore matmul
   0 3 getinterval aload pop} ifelse
  /zRotVec ED
  /yRotVec ED
  /xRotVec ED
  /RotAngle RotX def
  ConcatMQuaternion
} def
/RotYaxis { 
  eulerRotation 
  {0 1 0}
  {makeMoldTOnew MoldTOnew  0 1 0  3 1  5 array astore matmul
   0 3 getinterval aload pop} ifelse
  /zRotVec ED
  /yRotVec ED
  /xRotVec ED
  /RotAngle RotY def
  ConcatMQuaternion
} def
/RotZaxis { 
  eulerRotation 
  {0 0 1}
  {makeMoldTOnew MoldTOnew  0 0 1  3 1  5 array astore matmul
   0 3 getinterval aload pop} ifelse
  /zRotVec ED
  /yRotVec ED
  /xRotVec ED
  /RotAngle RotZ def
  ConcatMQuaternion
} def
/xyz { RotXaxis RotYaxis RotZaxis } def
/yxz { RotYaxis RotXaxis RotZaxis } def
/yzx { RotYaxis RotZaxis RotXaxis } def
/xzy { RotXaxis RotZaxis RotYaxis } def
/zxy { RotZaxis RotXaxis RotYaxis } def
/zyx { RotZaxis RotYaxis RotXaxis } def
/quaternion { } def % Null
%
/VecNorm { 0 exch { dup mul add } forall sqrt } def
%
/UnitVec {			% on stack is [a]; returns a vector with [a][a]/|a|=1 
  dup VecNorm /norm ED
  norm 0 lt {/norm 0 def} if
  { norm div } forall 3 array astore } def
%
/AxB {				% on the stack are the two vectors [a][b]
    aload pop /b3 ED /b2 ED /b1 ED
    aload pop /a3 ED /a2 ED /a1 ED
    a2 b3 mul a3 b2 mul sub
    a3 b1 mul a1 b3 mul sub
    a1 b2 mul a2 b1 mul sub
    3 array astore } def
%
/AaddB {			% on the stack are the two vectors [a][b]
    aload pop /b3 ED /b2 ED /b1 ED
    aload pop /a3 ED /a2 ED /a1 ED
    a1 b1 add a2 b2 add a3 b3 add
    3 array astore } def
%
/AmulC {			% on stack is [a] and c; returns [a] mul c
    /factor ED { factor mul } forall 3 array astore } def
%
%
/setColorLight { % expects 7 values on stack C M Y K xL yL zL
% les rayons de lumi�re
  xLight dup mul yLight dup mul zLight dup mul add add sqrt /NormeLight ED
% the color values
  /K ED
  /Yellow ED
  /Magenta ED
  /Cyan ED
} def
%
/facetteSphere {
  newpath
  /Xpoint Rsphere theta cos mul phi cos mul CX add def
  /Ypoint Rsphere theta sin mul phi cos mul CY add def
  /Zpoint Rsphere phi sin mul CZ add def
  Xpoint Ypoint Zpoint tx@3Ddict begin ProjThreeD end moveto
  theta 1 theta increment add {%
    /theta1 ED
    /Xpoint Rsphere theta1 cos mul phi cos mul CX add def
    /Ypoint Rsphere theta1 sin mul phi cos mul CY add def
    /Zpoint Rsphere phi sin mul CZ add def
    Xpoint Ypoint Zpoint tx@3Ddict begin ProjThreeD end  lineto
  } for
  phi 1 phi increment add {
    /phi1 ED
    /Xpoint Rsphere theta increment add cos mul phi1 cos mul CX add def
    /Ypoint Rsphere theta increment add sin mul phi1 cos mul CY add def
    /Zpoint Rsphere phi1 sin mul CZ add def
    Xpoint Ypoint Zpoint tx@3Ddict begin ProjThreeD end lineto
  } for
  theta increment add -1 theta {%
    /theta1 ED
    /Xpoint Rsphere theta1 cos mul phi increment add cos mul CX add def
    /Ypoint Rsphere theta1 sin mul phi increment add cos mul CY add def
    /Zpoint Rsphere phi increment add sin mul CZ add def
    Xpoint Ypoint Zpoint tx@3Ddict begin ProjThreeD end lineto
  } for
  phi increment add -1 phi {
    /phi1 ED
    /Xpoint Rsphere theta cos mul phi1 cos mul CX add def
    /Ypoint Rsphere theta sin mul phi1 cos mul CY add def
    /Zpoint Rsphere phi1 sin mul CZ add def
    Xpoint Ypoint Zpoint tx@3Ddict begin ProjThreeD end lineto
  } for
  closepath 
} def
%
/MaillageSphere { 
% on stack must be x y z Radius increment C M Y K 
  setColorLight
  /increment ED
  /Rsphere ED
  /CZ ED
  /CY ED
  /CX ED
  /StartTheta 0 def
  /condition { PSfacetteSphere 0 ge } def
  -90 increment 90 increment sub {%
    /phi ED
    StartTheta increment 360 StartTheta add increment sub {%
      /theta ED
      % Centre de la facette
      /Xpoint Rsphere theta increment 2 div add cos mul phi increment 2 div add cos mul CX add def
      /Ypoint Rsphere theta increment 2 div add sin mul phi increment 2 div add cos mul CY add def
      /Zpoint Rsphere phi increment 2 div add sin mul CZ add def
      % normale a la facette
      /nXfacette Xpoint CX sub def
      /nYfacette Ypoint CY sub def
      /nZfacette Zpoint CZ sub def
      % test de visibilite
      /PSfacetteSphere 
        vX nXfacette mul
        vY nYfacette mul add
        vZ nZfacette mul add
      def
      condition {
        gsave
        facetteSphere
        /cosV { 1 xLight nXfacette mul
          yLight nYfacette mul
          zLight nZfacette mul
          add add
          NormeLight
          nXfacette dup mul
          nYfacette dup mul
          nZfacette dup mul
          add add sqrt mul div sub } bind def
        Cyan cosV mul Magenta cosV mul Yellow cosV mul K cosV mul setcmykcolor fill 
	grestore
%	0 setgray
        showgrid { facetteSphere stroke } if
      } if 
    } for
    % /StartTheta StartTheta increment 2 div add def
  } for
} def
%
%---------------------- Cylinder ---------------------------
%
/PlanCoupeCylinder { %
  /TableauxPoints [
    0 1 359 { 
      /phi ED 
      [ Radius phi Height ConvCyl2d ] % on décrit le cercle
    } for
  ] def
  newpath
  TableauxPoints 0 get aload pop moveto
  1 1 359 { TableauxPoints exch get aload pop lineto } for
  closepath
} def
%
/facetteCylinder { % 
    newpath
    Radius phi currentHeight ConvCyl2d moveto
    phi 1 phi dAngle add  { % loop variable on stack
      Radius exch currentHeight ConvCyl2d lineto        
    } for
    phi dAngle add -1 phi { %	fill dHeight
      Radius exch currentHeight dHeight add ConvCyl2d lineto 
    } for
    closepath
  } def % facette
%
/MaillageCylinder { % on stack true or false for saving values
    { setColorLight  % expects 4 values on stack C M Y K
      /dHeight ED /dAngle ED /Height ED /Radius ED
      /CZ ED /CY ED /CX ED } if
%     
    0 dHeight Height dHeight sub {
      /currentHeight ED
      0 dAngle 360 dAngle sub {
        /phi ED
% Normal vector of the center
        /nXfacetteCylinder Radius phi dAngle 2 div add cos mul CX add def 
        /nYfacetteCylinder Radius phi dAngle 2 div add sin mul CY add def 
        /nZfacetteCylinder currentHeight dHeight 2 div add CZ add def 
        /NormeN 
          nXfacetteCylinder dup mul
          nYfacetteCylinder dup mul
          nZfacetteCylinder dup mul
          add add sqrt def
        NormeN 0 eq { /NormeN 1e-10 def } if
% test de visibilité
       /PSfacetteCylinder 
    	    vX nXfacetteCylinder mul
            vY nYfacetteCylinder mul add
            vZ nZfacetteCylinder mul add def
       condition {
         facetteCylinder
         /cosV 
	   1 xLight nXfacetteCylinder mul
           yLight nYfacetteCylinder mul
           zLight nZfacetteCylinder mul
           add add
	   NormeLight NormeN mul div sub def
         Cyan Magenta Yellow K
         cosV mul 4 1 roll cosV mul 4 1 roll 
	 cosV dup mul mul 4 1 roll cosV dup mul mul 4 1 roll
         setcmykcolor fill
          showgrid { 
            0 setgray
            facetteCylinder % drawing the segments
            stroke } if
       } if
     } for
    } for
} def
%
%------------------------ Cylinder type II -----------------------
%
/MoveTo { Conv3D2D moveto } def
/LineTo { Conv3D2D lineto } def

/IIIDEllipse { % x y z rA rB startAngle endAngle Wedge
  /dAngle 1 def
  /isWedge ED
  /endAngle ED
  /startAngle ED
  /radiusB ED
  /radiusA ED
  startAngle cos radiusA mul startAngle sin radiusB mul 0 
  isWedge { 0 0 moveto LineTo }{ MoveTo } ifelse
  /Angle startAngle def
  startAngle dAngle endAngle {
    /Angle ED
    Angle cos radiusA mul Angle sin radiusB mul 0 LineTo  
  } for
  isWedge { 0 0 lineto } if
} def

/IIIDCircle { % x y z r startAngle endAngle Wedge
  7 3 roll % startAngle endAngle Wedge x y z r
  dup      % startAngle endAngle Wedge x y z r r
  8 -3 roll
  IIIDEllipse 
} def

/IIIDWedge { % x y z r startAngle endAngle
  true IIIDCircle
} def

/IIIDCylinder {% x y z r h start end wedge
  /isWedge ED
  /increment ED
  /endAngle ED
  /startAngle ED
  /height ED
  /radius ED
  startAngle increment endAngle {
    /Angle ED
    radius Angle 0 ConvCylToCartesian MoveTo  
    radius Angle height ConvCylToCartesian LineTo  
  } for
  stroke
} def
%
%---------------------- Box ---------------------------
%
/PlanCoupeBox { % x y z
  /TableauxPoints [
      [ CX CY CZ Height add ConvBox2d ] % top or bottom
      [ CX CY Depth add CZ Height add ConvBox2d ]
      [ CX Width add CY Depth add CZ Height add ConvBox2d ] 
      [ CX Width add CY CZ Height add ConvBox2d ] 
      [ CX CY CZ Height add ConvBox2d ] % bottom
    ] def
    newpath
    TableauxPoints 0 get aload pop moveto
    0 1 3 {
      TableauxPoints exch get aload pop
      lineto } for
    closepath
} def
%
/facetteBox { % 
    newpath
    dup
    1 eq { % back
      CX CY CZ ConvBox2d moveto
      CX CY CZ Height add ConvBox2d lineto
      CX Width add CY CZ Height add ConvBox2d lineto
      CX Width add CY CZ ConvBox2d lineto
      CX CY CZ ConvBox2d lineto
    } if
    dup
    2 eq { % right
      CX CY CZ ConvBox2d moveto
      CX CY CZ Height add ConvBox2d lineto
      CX CY Depth add CZ Height add ConvBox2d lineto
      CX CY Depth add CZ ConvBox2d lineto
      CX CY CZ ConvBox2d lineto
    } if
    dup
    3 eq { % left
      CX Width add CY CZ ConvBox2d moveto
      CX Width add CY Depth add CZ ConvBox2d lineto
      CX Width add CY Depth add CZ Height add ConvBox2d lineto
      CX Width add CY CZ Height add ConvBox2d lineto
      CX Width add CY CZ ConvBox2d lineto
    } if
    4 eq { % front
      CX CY Depth add CZ ConvBox2d moveto
      CX CY Depth add CZ Height add ConvBox2d lineto
      CX Width add CY Depth add CZ Height add ConvBox2d lineto
      CX Width add CY Depth add CZ ConvBox2d lineto
      CX CY Depth add CZ ConvBox2d lineto
    } if
    closepath
  } def % facette
%
/TestPlane { % on stack x y z of the plane center and # of plane
  /nZfacetteBox ED /nYfacetteBox ED /nXfacetteBox ED
  /Plane ED
  /NormeN 
    nXfacetteBox dup mul
    nYfacetteBox dup mul
    nZfacetteBox dup mul
    add add sqrt def
  NormeN 0 eq { /NormeN 1e-10 def } if
% test de visibilite
  /PSfacetteBox 
    vX nXfacetteBox mul
    vY nYfacetteBox mul add
    vZ nZfacetteBox mul add def
  condition {
    Plane facetteBox
         /cosV 
	   1 xLight nXfacetteBox mul
           yLight nYfacetteBox mul
           zLight nZfacetteBox mul
           add add
	   NormeLight NormeN mul div sub def
         Cyan Magenta Yellow K
         cosV mul 4 1 roll cosV mul 4 1 roll 
	 cosV dup mul mul 4 1 roll cosV dup mul mul 4 1 roll
         setcmykcolor fill
         0 setgray
         Plane facetteBox % drawing the segments
         stroke
       } if
} def
%
/MaillageBox { % on stack true or false for saving values
    { setColorLight  % expects 4 values on stack C M Y K 
      /Depth ED /Height ED /Width ED
      /CZ ED /CY ED /CX ED } if
%
% Normal vector of the box center
  /PlaneSet [
    [ Width 2 div CX add 
      CY 
      Height 2 div CZ add ] % normal back
    [ CX 
      Depth 2 div CY add 
      Height 2 div CZ add ] % normal right
    [ Width CX add 
      Depth 2 div CY add 
      Height 2 div CZ add ] % normal left
    [ Width 2 div CX add 
      Depth CY add 
      Height 2 div CZ add ] % normal front
  ] def
  PlaneSequence length 0 eq { % user defined?
    Alpha abs cvi 360 mod /iAlpha ED
    iAlpha 90 lt { [ 1 2 3 4 ]  
      }{ iAlpha 180 lt { [ 2 4 1 3 ]  
        }{ iAlpha 270 lt { [ 3 4 1 2 ] }{ [ 3 1 4 2] } ifelse } ifelse } ifelse 
  }{ PlaneSequence } ifelse 
  { dup 1 sub PlaneSet exch get aload pop TestPlane } forall
} def
%
%--------------------------- Paraboloid -----------------------------
/PlanCoupeParaboloid {
    /Z height store
    /V {Z sqrt} bind def
    /TableauxPoints [
      0 1 359 { 
        /U ED [ U U Z V calculate2DPoint ] % on decrit le cercle
      } for
    ] def
    newpath
    TableauxPoints 0 get aload pop moveto
    0 1 359 {
      /compteur ED
      TableauxPoints compteur get aload pop
      lineto } for
    closepath
} def
%
/facetteParaboloid{
    newpath
    U U Z V calculate2DPoint moveto
    U 1 U increment add  {%
      /U1 ED
      U1 U1 Z V calculate2DPoint lineto
    } for
    Z pas10 Z pas add pas10 add{
      /Z1 ED
      /V {Z1 sqrt} bind def
      U1 U1 Z1 V calculate2DPoint lineto
    } for
    U increment add -1 U {%
      /U2 ED
      U2 U2 Z pas add V calculate2DPoint lineto
    } for
    Z pas add pas10 sub pas10 neg Z pas10 sub {
      /Z2 ED
      /V Z2 abs sqrt def
      U U Z2 V calculate2DPoint lineto
    } for
    closepath
} def % facette
%
/MaillageParaboloid {
  % on stack true or false for saving values
    { setColorLight  % expects 7 values on stack C M Y K xL yL zL 
%      /CZ ED /CY ED /CX ED 
    } if    
    0 pas height pas sub {%
      /Z ED
      /V Z sqrt def
      0 increment 360 increment sub {%
        /U ED
% Centre de la facette
        /Ucentre U increment 2 div add def
        /Vcentre Z pas 2 div add sqrt def
% normale à la facette
        /nXfacetteParaboloid 2 Vcentre dup mul mul Ucentre cos mul radius mul def
        /nYfacetteParaboloid 2 Vcentre dup mul mul Ucentre sin mul radius mul def
        /nZfacetteParaboloid Vcentre neg radius dup mul mul def
        /NormeN {
          nXfacetteParaboloid dup mul
          nYfacetteParaboloid dup mul
          nZfacetteParaboloid dup mul
          add add sqrt} bind def
        NormeN 0 eq {/NormeN 1e-10 def} if
% test de visibilit�
       /PSfacetteParaboloid vX nXfacetteParaboloid mul
                  vY nYfacetteParaboloid mul add
                  vZ nZfacetteParaboloid mul add def
       condition {
         facetteParaboloid
         /cosV 1 xLight nXfacetteParaboloid mul
           yLight nYfacetteParaboloid mul
           zLight nZfacetteParaboloid mul
           add add
           NormeLight
           NormeN mul div sub def
         Cyan Magenta Yellow K  
         cosV mul 4 1 roll cosV mul 4 1 roll cosV dup mul mul 4 1 roll cosV dup mul mul 4 1 roll
         setcmykcolor fill
         showgrid {
           0 setgray
           facetteParaboloid
           stroke } if
       } if
     } for
    } for
} def
%
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
% u -> e_u with |e_u|=1 
/vector-unit { 1 dict begin
  dup vector-length 1 exch div 
  vector-scale
  end 
} def
%
% u v -> u+v
/vector-add { 1 dict begin
  /v exch def
  [ exch
  0 	     	% u i
  exch { 	% i u[i]
    v 		% i u[i] v
    2 index get add 	% i u[i]+v[i]
    exch 1 add	% i
  } forall
  pop
  ]
  end 
} def
%
% u v -> u-v
/vector-sub { 1 dict begin
  /v exch def
  [ exch
  0 	     	% u i
  exch {	% i u[i]
    v 		% i u[i] v
    2 index get sub 	% i u[i]+v[i]
    exch 1 add	% i
  } forall
  pop
  ]
end } def
%
% [v] c -> [c.v]
/vector-scale { 1 dict begin
  /c exch def
  [ exch
  { 		% s i u[i]
    c mul	% s i u[i] v 
  } forall
  ]
  end } def
%
%
% [u] [v] -> [u x v]
/vector-prod { %% x1 y1 z1 x2 y2 z2
6 dict begin
  aload pop 
  /zp exch def /yp exch def /xp exch def
  aload pop 
  /z exch def /y exch def /x exch def
  [ y zp mul z yp mul sub
   z xp mul x zp mul sub
   x yp mul y xp mul sub ]
end
} def
%
% [u] [v] -> u.v
/vector-mul { %% x1 y1 z1 x2 y2 z2
6 dict begin
  aload pop 
  /zp exch def /yp exch def /xp exch def
  aload pop 
  /z exch def /y exch def /x exch def
  x xp mul y yp mul add z zp mul add
end
} def
%
% [x y z ... ] -> r
% watch out for overflow
/vector-length { 1 dict begin
dup
% find maximum entry
/max 0 def
{ % max 
  abs dup max gt {
    % if abs gt max
    /max exch def
  } {
    pop
  } ifelse
} forall
max 0 ne {
  0 exch 
  {  % 0 v[i]
    max div dup mul add
  } forall
  sqrt
  max mul
} {
  pop 0
} ifelse
end } def
%
end % tx@3DPlotDict
%

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMR7
%!PS-AdobeFont-1.0: CMR7 003.002
%%Title: CMR7
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR7.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR7 known{/CMR7 findfont dup/UniqueID known{dup
/UniqueID get 5000790 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR7 def
/FontBBox {-27 -250 1122 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR7.) readonly def
/FullName (CMR7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 50 /two put
dup 51 /three put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB981ABA2ACC9A23A5
3E152596AF52983541F86D859FC064A0E3D5FC6647C3CAB83AD4F31DDA35019C
CDB9E3DD3FEBD4C2B36BA3CF6E6C7DA85E25D8A31A9BAD39BDF31FD0D1790707
9DE6A078E8A409D8295F642DF492AC4F86AC84383B0F4C6BAA7C22AD5A898A71
D6CB34D2CD12266C486B75E75A69C14819DD9BB8159088E04D4717E576B8482D
BDA52110AC8B8A80E4E9D58F470EEBD3CF44A1E1EE8DA318FFF3611B02534FC9
F4018C7C57E80570D2F634D98BE5D5EC6D95051157F0EA94A3D12BE0B4B79939
F82F8D73136D3337C44E314B0B16CB030D9A12E01FB667105F334C3EE965E5A3
D410D2F1531547A4497C355AEEB295CD3C5334BEE5232992960B757594B89F3E
52095042DBE6B4DA3C3AD50CA95EA9EBADA10630B500CF1FCCA7D60306743681
7E428D33B7F7C40B425CD58E4CD8AB474BCE6A307BC6C6EBC15A8A96E0E2977E
A33389154536F5C5D8CF036D07F24094E779E5ACBE5502C92892F10F4C6DB627
C7EC4C7BF20B39418A8A85D7FD9B0EAAFD871DDD41F93BDE5FE619AFB8711824
DE890E62C1969A6FE28DD3578AF43D58A728FAFF0B9FAA640962C8F35A26F76C
67F3548D6DB54A25CEB368B47F97EA2B0C4D7C0E7894A4F0C823C6C1922CF9DC
10E05600556F1C7C9AFB33A2DB6F8730F70D6BF94B1FB0887451F2FFEEF3584F
DFADCFA9A2D4846B8F0E51620E1327D994CDF973B837D10C90FF76DE22B47CD5
EE3183898D156861AB4DFAD34A1E3FA260B8164E6680BF58413A553E88F6100B
C4F4E8E972C81A5F88A7DBCDC308B4C3581BCDE13877B976B1F84330839FE5CF
C78551620EB803DF94A5C921F8EE24F7EF8FC4C3E1653514212631F54F90E3DC
E9EAF96E998F340C4F729ECF7AB430FDB7C0BE3DF2C0D23015820E28B743CAD7
7F0AE95413C3EEABBC69E852F53EE1DC260D7F1E712BECEF2F18437DB23D8E74
2902AAFBC733AC5BAA452DD6F3671859AD836C8564E99CDC4183D8495AFD99D6
1F0D65B6588CE7546717911E25BDCA6C2649E3A7466A3E2DA7C7994A30AB4449
672EFD00632EFA8629C1AFB7D53D801028F77C864869FE636213A69173003EA6
BE1ABA95EB07B13D1594BEFCC95ECB0A9CFA9892EE0677D6B6C250855762B7A7
8E4E022640F93169DFA0303A0D5E73BF3E0F4D4AAD10FD7E4EB20532BA30371F
E9F480F9513432946F9828AFB5D4AEAFA5829B2CB544E5EB634C4537EF7DF08A
A1CFD94A52DCF0E7CE4C5EFFB01E6D50558B75DB4C8D5512B06080F27BE62E01
2EEA6A0357441401458C842D3DD4C35B8F561D816B336216CE0C14BF77648AF5
E33912CF95872A1E1AB9A18980A0B29A881D13397C15E1CBA5D3E0B27943EBE2
F3003D15EB446BCFC1C231832475D5B7AA19E4CFDE119D6CD62D053C6D29C333
5F729791D17B3F7108074EEF4D1BD101CB33E01004532CB0D716D2E54D169C6E
80163E70C0E9081F31A1ECBAE079D2A518B790B0CB2CD03DFD034A0F4788E800
B0CD2DC1FAFDD487C2F381EBAB2A2F3F3AF82021B211DC9CD2FBA6A1BB3D4AEA
4C7F3D9A5C21DFF284CCB827D205A69638E98D5DD8E36AFC1A4481B5CB2A2E8F
D6C838DA6F81990F5ED928DC7457501B5C979FF4CD20A830896A460C5DB13D56
A3B2B5D9B292374A9BF392894DD99FCD6A1E655AB395E839F074D1596488700C
4E2891C8AEEF66568E82A8B826F9A28FF84D4D9BDA21F638EAF96880B4EBE0D8
081982F34831A03BEE81FC177700C2360D2A48915EC40D5FE85B400E175D5AF1
067FA0097904FB647757BB44B4042D30D1557BD0F7922D731142FD682139CEB7
58CA4C8C240A0B86B1888CACC507E24E04020BF1882BD9B4CAECFA97DB24D7F5
AD64C69454027F198BA35881B94EE9159A2D73E450C3BDAED66B886D6DEBC84B
653E165176228F88993F12A170775A8D7038BDF2FE8DC1F7B98BDC02D1E6686E
9B834F6C0AD90780B17DFE25F0A4E470CBA84E73F2D22BEE09A040F14CFA2C14
0FDA5A5149B5FAFFE49F55EEFC43831BC43A8326FEE9C7F469C0FC3B000884FA
41DA7318EB57262CB96FC4EC7F16CA07FE1C3BE8C2DBC8A8135953D6DDF20BDF
75A2B6D26074FCE752BD32FB9F5CA797775E8DB9BB9786B469A3CD65A0D9DDDA
C2A166E454A94860EEF5B5C12172DDFC576A03F6E6F8A735FF21A3E9CCB4CAA1
3064893487697986A42CB5888B2B0A79FA3C74E8187BDDF7BEAB884B70B8D4AA
AC6615745AEB906E08BF831CFDE222F58D02B428D55E9D5A3CDE74E42D8A2CB7
E1A3A9439B678AD438793ABBEB72B21C58981DAF3EDCE4BB93D95F4A1E943BBC
B3A012DE92FED4F232A3A7D60CE60B605151F9C7C18A5C653E5D6D15E5B49A63
73E7A339504D0ACC74B8B116EA88C3EBA2CC631AAB29F761E5F062966AD2FD28
7FFE52FA8A115DBE23E471094FFB3CBAFBDF11B7E9058313F2D069B2CE98A962
64645738F02A31E2F2AC11628724034ADBCEE012721EBF0A567893411F950410
B20754A7510D041FFA6144AC9CC46D846B82581F20BBD001D34D9764010824BE
61C30D05E5C5D100A24F1917F01799CF5BC4E50FCECFEA732CB50196825F0E08
8A1EC868C6D4357857EE2957E081A0E4372E31A8ABEF23C3F2EA0FEE57DE4D08
61C570175C41AA0C7A3A579ADF593F18B4AE3782D2552E4E0759C32E059EE741
2D8191E381731769F6648B3581CAF11DAE46471896666F18F02918B0860BDA3C
BD5DE777672447C23C62ACFC2611ED5239D6A266FDA6031EBC5A530C1A2FF7A6
B4380B9A4C877267854AD1F1677CB5433F28894ADF93D39EAB94541A8D232E08
22D082D0951A60F62B87DC028714EC74133A4D65F7D0D1296C0E189C4A42AA98
28E8AE7ECBB9FC8DFABCC6EEB1E9FB06227F90808EF31331CCC5D4C9A6182181
047902DC9FD0444FB94B60FC74F3B677758088CE6A159D940C5CF682335E756A
8BACF06AD7225D49B0002392C889B0FE2C71311D2596F4903D12FA20BA2FFE25
A0804B4BC282929BE31E0F46B34532CB5795A65218CFAE21F390792DA67775C7
B91A2BF4C16DE4F6551DAE3A5827F616BE9040EE6B1008DA2F99A01EF66D697A
6CD1A44E0A15D1F39EA8025E886A68A1E9C334327C7703EE721E497CA924AC90
7723106D913C5ED4BA4FC743CEA8D0F5172526107DA65775C0B1B77179D336C2
9B09B608D80B1A1E87CA1A84A833A00D980D919BFF56F6390E9D5B45E9935CF5
E69D003564462F750F7DCE02DC23CC215A0696B74D8BD3156A392A94F557655E
00BFAA035647568ED66157FACC585E411F7F428569C147DC43F6E4FDE693D0F3
9917BEFEDF61FB980B85515FF6424824E2D995B05CA1E5D3E8BD8D3281DB7CE4
E54923E84058FFC0A8A2C491327D0F87CE4C352B724167CEE224DABA3B95757E
4A419594BE4F92E78BA6D35D4C93D31ECC3134B24A45DC32445725BB044F09A3
AA8C31EFC0A2944ACE2F2CE054CF24DB350FB3C71115518C24BDC0F7E54250AF
9D3378D38480E1CB9029F31570C619A28F065CA4FED5665EDB96712ABEB33B9B
4232C00C1B0215F08D53F7E430887035AC25BEAF06942FD1B6C442253C887AB7
D694C1A6115C8990B4CAF1E81DD1FDDD6B03C00055BE956BE7FD8A4E1049AE69
EDA8593CBA8C4A41E046C689FBBF9F1B64E5856A7FB1C61EC815A56DE2A8ED33
41F370B8203D4E5B19C63AE9E6E0D26F4F3814B5AF48AD30EC9B8402C941FDD9
722FCAFC638FBB835F83DC77F93D367266FA7DFFFCB567EF82B1695AB4D94D09
B18AC041811027229DF431F5CB2BBF6ACCE9D500C8F075A74590641C1A607C56
D2B8624797BCD9C91C3177818691FBB4744EDB6056464A0B95B8D63F7C22309B
82D6126E2057BCC9FE5566D96B7A9B201A09B0D3252A5494C8CA2C8BA8A13C29
37EF2A882D61DA708C279F663D88A8E2999A0F3B6F98C49901A7631BF7708B67
54D0B4C52BF4BE0DA0439E6763A7C9D639AD4092E77B13D3510DAE1475C978AC
796F9B2AAD3BFF35C5A3E19B5E2BF704B3BBDF68CE48BA4FA2496D60E58888EA
28AE12D00E9F0816FAC190590A865BB58569A91BF0345D01230ABA361442006D
BA2C90EC2036BBAB79EBAFC3F217DBD5854C519235F9627A1C3C71D21ED38AEF
0BB40F3B86BB9F09A3F309473D8757AB7E638DC1C59A7F9BCD49DE4107A2E54F
422767FB94048987847205584309397F554744690ACFFDF5902FE5DB355930B8
71863217830DD7A563B0B3A4025ACE75B0E777B4414B62A13B50C54E0E6D47E9
D43BF769B9411B74E1069BF71BA873B4B8973EC9BA492A5DEA58D267872BB246
10AA67B143D0E2223FFB4991E583E629413CC894C3FA4869B72D19CE1A0CEC8C
0FF5E5A3EC1FCB7D3C4289813F0D249A11B55104BD60B2A89BEF44CC77CCDA9A
065B8B83B4F4253AA1D535290DCFAA4773452D110D2B3370F9E2FE5432B54A9E
644EB3BA9BFF62347F376839024CD5EF3C5DFD30F412DD5474B7933E6A1AB63B
4B12F2417C72D0543C26A263AEA53E5BAEBD67E23553A72E949DEC556BEB5D09
C4D7A89B14FE4EC68D0E3E9D65A64B285E53590F418EDA8175113CA375A29930
DDCF4C71ABB26CEB800C2C2B253AC1F53651C88A56ABE5A74F3B54CB4FFDDB92
60AD7272BA25EC2F6FB759AA6E1E7964FB55AD09F4EB25DE45FD01833947BD05
6266AA8ABB7DD792941C7A070FCF3A4636FBF8921C70298D42FE92F079DBA2AD
6149D9CF9EF7264DE6DFCD4429949B15EA90B596340713BD61926DDB2BB23BE8
F9DE38A31620A817420A245946E551463960A8C5C7295E3B3D6A59BCDF5E472A
40B7A2CDDAA43CD8AAFC411D037142579D11054A903E102DF0D0C7B5BB854DBA
F3F086AF991F7F5D5C730F8F9AF213F25786F3EC0E54530FF912F4876FDE16B6
A07D0DC4FC46EC6363BCB68B83ACC448B801EC43FDD2F8BE0E93D809FF81E38E
176AE17C67C85FEA58EC95435434C49A950AA955D8B20989C550AB1F1C31B7FF
99422E1F48FB7D6F327C6DBC4695A03903DB275B94CB39386E46579271870A25
21823E75C377E9D5B46655E8CD8F986372CF8BA846423E26582315A9D19E0BF5
305C32B2A0EAC3ECB275B1D8BE11A37ADF524944219D94EA2C5DBDA768828B6D
775DA8CDB09E0570E4ADDF462EFD8D3FA3F86B1DEECDFFB699AF6507257C1879
16FC615868C2D51F03CD57BA38D42995D9164B257441210084DC409B6EE4C119
0B2E17B0A8D5326DD0010E4A325D5F77BF935693BC90A00A28C7B5F74817DA39
F47A41E32F4F92AA04D30D810F7B1484EB53AD8CFC8CE8928B570314E0F713F8
AF127227190F9C16BB73D2A217FF801C391A29095DA5E4974D137A0CAA7DE702
E20DD4755B1D78739756A5E7EC3542B96AD6844199FFA2F5F2E9C64E2DA4FB2A
ED79869F745C59D235438251BC2E6D26112AAED20E06021D1AB896EE1F1DD2EB
437FBD4A25E42245C5A647493FCC9922E6DD7AF57D5D482921D1CBD6F0F02949
C27777144751C1E72F4EE2BC343D4AE7A8A8758123B54FB1A026144C643651EF
0907A376945E19A8FC7F98A034832A5820A481B0823F980F59623E0511593FEA
BDE6EFBCC0383242CBD4954027B075B21F10472059A480D6E5ED01C3B07461CE
9810251A5C5643EC7403130C2246E8616CEA25EAC7A0076731FEA8CC43BCE3BE
933FCE61067F5FD402E67E2B9DAD954AA77C5BC86BC5E4BCE2ED676D8D8EC7D0
ABC5C86D82180B9D5D7451C71B5149B6B67883578DE9909317928C0A92E3205E
F23015400A1763A6FBF67FDE3318AD2696685A1832FC31CF38589EBC7CA1C818
60D2B2211E04EFCCEA88D9A9082E82951EEB123924A267CB03C48889032F2892
4227E217FA28F87E01CBF27BF1EA60641A4238258CB7AA355908FE36D90F5CAD
FE992D03A33E47CA9AEBEFDA57793F39DC6A9E85D5B289F6B862B35DBCF82E43
5CD6A862F6FFAC36478C384C3BDB0148CB1FEDF55969C776E77917635B5A65EB
F2AD351D21CD3822D43289FE8EB0FED58182997097C7E9F4373553AE1CA92083
EDE3BBE6C3BC7009D15AB5FEC6A59E9FD1BCC7B2099CA15FEF083B9CBF7B890E
CDDDE6BA0AFF306C76500C945DC91BD533FF9A585CEEDEF79238C54E6168001E
26FEB29E523EE501BFA4F60B782B1499B07084C35A2434B4D29D3D8E2C8F945F
A9922443B68D07DF7EAA1F4CDEFFC438B597D8943E231B5216808A85F30EDC81
9DF5DD22F54A45335B4C2203887475F39D247F0E7347BACFEAF220ED82F9263A
6488E73C1910023E505FDEB143006C1A351D441AC57F9D52D2C6D63D78C75605
999885676BBBAD56074298E0BFDACBA1830BA58E87F436CC670EE8EB1870154D
72DDBBF3794F8CAAA3F1E11DE29752DD99EAC695838A19BB67A1FA3829B6E0BC
5301610A0351AAA749F456AE31ADD87D6ABADCDD1FB3CE81C3713F48780DF407
530CB284B2AC709F52EE7AD647DEF9FA4D2A867CCEF728F3D40CF34C28D21527
10160B3DAFB5FE16AFC9D36C6EC4021FC189005862082BEA60AC72B63AD27D72
FAF3C2D89DA2648FC4C65104A069212D87144E8533CD86A6D73DC7CD9DBA25CE
7DA53B000266F3871B24663C77723703315C5E4A89DFCDBAB384AE7EB2F455AE
AB191FED406F7F6EC9E5B8276EF5C4CBA041AC7E8BCEC7CAE840154BDCA3232F
15711ABD1E867A434E9787CA0A6D1F197597DA27ED2402CB2D84ED082E8D3A39
81E6EB270DCA4E7A90E2BEBD3CBB3A2BE3CAB926192D7292CC16845B6399A543
BCFD224BB52F21352732DB5154FA3442733066CDC3E186D8AA97CD801DFBE43A
116C86889BE198DA88CA978B8C40ACB67E8F7BA499DE68A6FF0DC72C3D00BA1A
B378B39610F15CA026F95ED8155CE3FFFFA2E2FEB352DBE14CEE1669F2387B70
55B91185FBBED764266215D518716EDA3DFC9E5DB6B148A553E75AE5E38E1CFC
6EF47B314D54CF24BC13856F4F7C976BB91D143DE32FF49BFFC87E17885A1893
BA1B8E441B08EFC04F7D103C1FFBB665194B3D0920473740C55FB1C50EBCF717
A2359B687FCEAD65616EE89A68F8D91AFACAA0B238EE4AF0279AF5BE5294C3DE
A7E1F5E6248C0210E7D40683F04B12A933C746ECB517CF94BBCC6E4CF49AC715
D8005AFECBDFB7A6B417DB8A28F8E9EAF39CEC1CA64DF37A5E66A76C26F721F8
A63B003A040A62F87DCF61B298F960D510BEFA453F118E59E7DE8CA3DD002EF0
127EAF733D5C61B5132348D280F84D159809CC71A3C6F7373BBFD8D6EF715D34
0016DEFF14AA5F960BF1BB9AC304A1823722843547BB4CA5EA4C41C6C2701C8F
7BDC810443F9DF34BA469A3260009B799871BAF8523C8763544DCD0B382D44C5
F75046AFF85F0B5A3188C2EE786CEEE5496A5AF4BCB0B429CAFC403FB983EFE3
61FD9F52ADFC38E07A0FD7BACBA530D2E4DAB2592AA9564843E7E2305047F060
C5FE4243FA8FDF1B5D4F61ACA7850A604FBC6D6970959752695C90F78961B4E2
C8CFA41082B1A37405AABCEE5BA3DC2B9EA76F486117B84728EC6D8AE6379CCB
402C2AA89078EC992C00D53151E9D82C65643F549A572A20F05107A41BE5AC57
8EDE92AE20B05E2D0C98151CC92D5389A675DFE39DF546A33A84A4C534337ADE
B17C34E09145B37CE1EB1D10D42CC8D6E6B127A3809F7202381FDB88D42084CD
0AEAEB8A8288CB56870EA2BE9D0B9DC8291021CA561E2BA388DA3494E433E0EE
5E69DA51D0AC505C9F71562D3E9750F23CF14D2C8ECF0692FBBCB4A92B48B4B0
AA2163A2EA883B9272CE7F3630C6CD3865D78C49FB54B677E4E09581B1991D83
972DECD70AA818D27095A01A1645ADBCC2BF657267F237B718ABC713CD49809E
3C3F75BDF94A49445BBF509788689AAEEED658C856DAB86688A1AC36E11E7F0F
8FF51940C039F5F430FCE4AC620DB19E2DC437EC386BBC44FEBDB6CB98A763D5
6EA93ED2D7783729F2C366312C3CB0FFE43F6E3071085B4DBC075AEF38DF6E8B
18817661D82499F0F8572D78516D110561BFDC2140B873C16873583BB9B7B8EF
3EB9270EDD6CAA75B36CE74EC92E8C32336D52CDEF15AC88AE230B1327AC49DB
AF77270D898561823471F0BAD78A82D83207F1DEBC633FEBDCB95DBA361DAE14
935CD01DB78F0DAEC7F2746AD3C8CA6F7AEE7BA9F80D1BB700025B9E6C6E1FE2
984134A6AB68DFFBE2EE6B575BF9FAB17E69B90FDAD6DD56DDC85D08BB65388E
8A1DC100DD311D6C6F4995A6421757ECB5FAD6BC8BEDDD96599743009F88A94E
A999DA7C87967F3810D1501F8781205C740E995BF772D5A5D9DB5FF146379548
BE81674B2FB458FCEF993787D26EBFBE327E2E91F97E91230F830F3194F8DE45
AAABD1F10C1BC28C4FC58D39D4C20589824DA0F0FF32C89E834B6814D99BE267
529B3634F26AAC131D6870590C12C28FF686C67BD7E8BD94EF5B9A87D2C9A990
CF2E98FE1E10609EFAA31E0A27FA0355D0E1108C04557BF897A669EDC0666194
7D7FCDC47D714E3BFC840A9035187AFD2E1718DE10A41DF87F0D2771A2C28C23
C948A926F4A3661311794681456EF93111F4EE7592F57BAC2CB225AF8A11CCE5
CFE0D3263A4E2AA73CE01C3E2827F1FE5B6879684D02B39CCF12054875F5AF34
44
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMSS8
%!PS-AdobeFont-1.0: CMSS8 003.002
%%Title: CMSS8
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSS8.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSS8 known{/CMSS8 findfont dup/UniqueID known{dup
/UniqueID get 5000801 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSS8 def
/FontBBox {-65 -250 1062 761 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSS8.) readonly def
/FullName (CMSS8) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 45 /hyphen put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C295470093CA270C6258F0D99DCD775
734480114DD0CD2931DC18782C4CCB90B6906CE08BF4CAEC2D4283CD44730A2C
28919598227F98FC5524B0CC92540E349C5B190DF5F2317AE46FFB97221BDFA5
114C21D5E8FB0D1C298EDFF8836AD72A9B2AA132F52DD5D3F30427563C97CC46
D241B7024B4CD9F1E0037FFABCC88D8CCFDF3BC6EED778074F9590733CD147B2
5B68387E0F19E6A81961077BB7640A3C0E27ADD72556CF84ECD981ECCB64184C
EAB8BD9B96A873D80E3E0D5B4F5925983C80EBC3A8A12FBC452582A0B37D3C42
4DFD22E9BADDCD2E69644AA271EECF366D63FCC29522FD72D6C1EFDB3597E866
61443179872395E99024F152F6D6A4FD71BF1C7383BC1CC27AFD2DE3DAEFC06B
6BA837BBEBD0BE09F6AEA31A83B1B45255DFD6FF33362AF8BCABEBB0D944B3FA
B85FFBA0B370B9035460905432EE87395E518B4B670246FAFD535774467C059F
DC30EA01C95EFBA4ABB41711818E23D7E69D32BD63243A6D98666BD46E234155
BD6ABC76F551C31B6CE2E52323A9DAD5C003FB116AC8A82B46ACFC45EECCCAA9
E12C2C8E3CEEFD98D49ECFB824E8677BC9CE9B682BB5A7117174E4B2A0B925EE
553713780CDF3A3A4AF1560343A8A448C0B5DCC4E11EDF5ACBBA0BA8E5B899A3
7321AA7D4B283AC9234978C2DD81813653A96F2BD129FA5F355D56C4E50310D2
0FAA8F304D8BF333F97A6CD20CA4BA7BE6DC1446759683933BB1F1617AEAD131
1C9EF2212EE7EA9B64E5ABFF45E1727EE82C00FD371BE1387987236F9BDBA4ED
A966658ADF028B5DAD1F0878064221D0469BF17CB4E738258FB5D92E9D380C64
16E95BBA6A2BD9EEB1A187A7231C53BD8ABC9BAC46CA4AFA94A4920FA805F67A
A0C61940F6826CC4539A6CD1F9900EDC3F720AE4FA097F1D7510746BCE2E67B6
EA2F2046613785AAB89915655408AC9D03201838BBA44F421D5F25CFD88E56E8
1CA23CBEE9C2E323DF1866D31F309C92281E514A87A9631F33B238AC6520A20A
346DD6A206C3CAF2830FE244F2AC5D894686CAD5F4BD1CC51EC0B547603BFFC4
F008FDAEBC93542A43B7C907CC85046313348CC8A017C585CC370604E40AC820
8B9D8F57A01868FDC93551DE10FA83DDA3E49E44C32118ED90FA67AB1C66B3F9
F80CF71131977ACCF4DB44CF1EC26AB363C5F95FC2523B5DFBF4D60647EB23AC
89CB971DCDAB3BA26846BA9317C051011C37468B21B159412E69DCB84A9F5876
F418908678F38880B95A4BFD3566A6EDE93AE05BBDCB3C4E240A5C0A06301896
69FCCC0B65BB269F2E10609B6446A68E2DECA905FC26D4F502CAF0EE9AB15E60
CF42CEB376D92D80A6AEE55BCAB006999BF4415815D0F5BA3B1FF9D2E60201B5
833FABE8B883847ADACF9B032721DEEE7FEBB583B89066ED9608F1EFBCDD09D4
3F3C2B7B03154676151753DFF53815F2EC1517C094B0D2CC5EC483AA93772D24
AD3B0084537B91BE1913A31C70750C6DD707761DD733F9ECA552D3F26825B2B8
3EA263488892C929DEC07E2F988B7F7657D53CFA5542CE336D35B462E5E8649E
05973AA54C0A4E63552004E3C77E5FA77F821D820B1620CC8CB3EC5B1D7BA751
16CC155DEDD4DB0FFD3009729F365670DF9472435557201D8E82341B4056D2FC
5D2F7C57599249DA2A99A522868716B076320350FA7415C3B10D77A6E1DC77EE
2D929A038DE3EB4735A4D4F5C8C340D6D293D57E83C2F379ED0EEB16AA3A2A2C
ECD664E526D918A3D0A934170B6E1493843E6AAE87E850D70DE65D34AA2A36DE
8687D57A6B6B1447F9A4380CC3D4D11D54CBE762258426C46B8DE6059E6A2F31
E748549310FF4362129080CD98E70817A06422743780B86E11101BED14BB6569
D36903BA8BEBC24A478CD430801082CCF49382D6F04DE270D51CA5BAFEBD0F8D
901CDBCF10DB97E2B059C8CF7CDB45BF931203D5F8CA4622DF19682DE2BA7924
47F78908BDA23C4E21C0ACD2DA259B23648B6F233EEE830E7B82DF4371F55C30
71993EC2BCC7BD6411690B9B1621903F358450976D6B6EC6B505A593A9FB7D92
7223E2424DD5AABEFF254FBCEF934A4D51949BA0E8CD614AAA3AE6C3ED7B37BF
5324BD4998D8D5DA95E4741B753AEE580FB3913770C00277C9F609B4DF3D618F
148E0EC7A75218AD788F98D35989F3DB94413E70955EF586C0995A450BC75820
F5490EB55E5D0D21343565E1FA94FA64A74377F87E55EE0EDDC8F4286951A4EC
ED6FB3B444206D89BA71A9723E41E93A9F6C80240437019F3C23DFC2491A19D5
29762876AC60A14404493D04B5537C1E6FCA67B69DC1CD859F9C956FECF4461E
EC8B6CD5B5A89A8A838660A6C3F47B79ACE3B05C0AA2F17CF2DA947B893B42FF
749E2CD5E7B56823A119629931B1ECF65C51000A10412668877178F589B4DBCD
24D39F9219C46BDDD6F101C6AECFD3876056CBB858FE0C4BA2BD0B5FC26AD5BC
7FA9E295E72BEEEC721300567B6894FC48FFE5E3067C538CBB3B77E386F50D22
F8DCFDD0E335060CDFA49231D157981925F1CB36110809C12BA28D2D116116DE
01898E311FAACEE0E5402CA30B64D3D5A0CA33E417FC322F2F0BB7AD3FEE2039
56A15DD6D1E86971AD3A5A9A27F33AB62A5A3BF5660B59235398926D6BDA33BA
BC43B062EEF199E4ED991518A62AC374EE21E8F1E1C954BA6D1493388F708D0C
961612444BAE019E1DC18BDE900BD7A781835580A74DC696BC512F7BBDBA2D0C
ECE5D83A049F7A3286B94FC446DB5C3F33CA2CD3DDE2D0E774A579831CFDAC37
9612858EA613AE6939CED001EE662DB17642D0357B80BA0F82ED306218DA8505
A613CD622FA998EBCDFB7BC70F4E4C8F1F43241FC22FC5BB208F4B20311A98B2
73F30E4DFCEC93875CBD1ABD29ACF80585F59947F23A96D218C0CB8BDC1C49F5
70DF3D49704CBA9A23294A88A2AD61811450921B1E5C3C86435C55AF87AAF6A3
A13709082DA9C47D372A4226116342DECB14E4A4ADB7598321516DD637B64148
12AB17AC5B2EB25718856D50BFC8D64C78DA6E5C145187DB0325C30A42013A81
590E58E74094610207FC70BBF1A497395939B42A6EFCFABFD9D43221DE484753
DFE5311F1845592B4484B1CDFCC32B4E068B11A82BA189D2268D88FE63B9C6E9
20C9E40B543B5C401265D92A932476DAEADD4D3E2BD6E4DBEC0B30FA90A1924B
41D2EE9D8AF2D8CA79D15518141665B542C696C2507DD2F4D987EE5E22397FA8
FD80743186872DD67BE58103321467CF3F4B8898E66584DBB9688B9C78873CA2
9B72AD7406CDFE8B58FACA2904869FB0EF126DE299CAC08CB89F60561939D75C
2722CA57853372C14F5BCCA5C4FEBCEB0728BF9E30140E6B0D6C034195FCCC89
291CD818CF66757EAEB0AB5A9D5710988EBB052850DDE97BA0DC0B054BDF5172
2002AD6FFA44AA5D9D4EBDB6B2C04E8EF38660D9BC4C995BF37DE078C279328F
4C360B8EB337D798962CACBBDEA517A5EDFAADF0D445FBD1099837F9D689CD2C
E330CF587246387EDDED64A2F4C397C1B2BFC325B39114609EF57DDCD7B93C53
811ADEFA323C59441ABC447F683B5EC43870C057463DD502E9B9DA7084C3BBFB
2FB864D26DF1BA41ACC815F2A71E96D2C6F572E1F7E4A224FE57CD605682F98B
AC7BDE4B85A4C11D58981E981E9FC43B87A368BAEF78AD87B7DA0FE403AABFD1
CF414CBE75C0E9E257DADCBA035E1BF05C4E17FE92309F18633D93DF885956A9
6C27E77540F888B8336B61598CAB04F3B5A1767C1ACFE15D32A25E5B1BF51FFB
CF3CFB25CEE7DC95203CC44805A935D5A9154A89FBD4E465F0E599EED4033365
0A31612F37BDAE8CC85BBC67F7E375EA68C2982FFD89284B027501184C4D2232
CE0FE4E905C4B504EAD009F047FE627C79AF9EEDD65D00A3858F88E699E5EB45
4957086CB22776AD06C317DEA41880D88F0EDCF71B4ED76BEE665B7937D5D0F0
E568C7615025172086BDBD69670EA154CC52C85CBFFE88C1A4D1AFB6624EE667
1B5BE2A31FCE8B2A4B03BC5DC57280199CC0970EBB636DDF8DF54C4A8CC8805C
AD63CE866FB20C64725AE4BC9F0EB275BD83EC89F2F9CE23A084B45694D8C3E9
3F3D3C1A678690877E8B1B77ED85D4F6E03DBF1F3B1D177E330475F172E0E729
63EAD8034E6100B2A5773E2605180629972DE6BAC0A8C2F9580E9F1D2E77791F
E1D33C2DBED3FAC47DDF1B74FD02583C3CFDBB2D1CC2B735C02B14B7AD3733CA
1682944ECFAD673A9AD5E80B6248FBB6E5036EA7FE5CA8C34FBCA6DBD0E76EB6
C2CB89D9815DB3C45742170DA926E03493AD86BB19A1D3FC623BDF1C920684FB
7414EF69CF39713A9495D8CB678BD4592B53C36BC6CF93505B8E32311D42532B
5661051B855F01A9B3D77AE38879853AF0FFE2448368DDFA3EF1DEB88AA055B7
91459586DD2DFEDA192306DF7143F998CC5D67C1CED313430E5CC3F9CE265747
8582102111E7AF9FB94D95B82D8E1DF01F04F2A2C22A20207B59C8976D56833F
E3B79DCB727EE7537476A052E92F7C3D6A625AAED8F026F22AB59EC0F86E541F
BC082D8E35234A18192862EFD232C9950B1FE0BCB91209FB540DC5729B9E36B9
94D0913A8F01FB6CB16DE85E6B89F144111B1D911DC527C24917D909F1CF501C
1AF2923EF71530F21F9BF049A56C7AB3249A420C28954E981EC464F61FA167A5
C6084661808089EE7DBD80A2D92FF4040B37B2D81A2F5A568D461BE1C62B0FD1
BF6D1063D2B5DB9CD48BB2B2AC9CEFA543E0AC5C86C462399C1E82F25A157282
D32D538029ED22CC5935E63FA076BE22D3F53B7D7CCDD344D68B4E73F87A5F2C
691FE68C981FF7CCFB124506FEF93F36F7181075D7BC6FEEC0E35AF57855BAB2
44AF021C7AD8912D884424E8BAEC68A5562B881793A1B47FD338B1EE4C0B8583
2867C78DBC2EFC8BA1431DB1C8622C99BB2C2D4D5475BFCE87B11762427867B5
7253463C6F2E1CF5F1DC1F7851F2EF6A957CAB0C0A55076C59A6FF9237917C08
5F97C2CB4B5CC903B76BE8C057018CD962EF90E1C0CCEECD52F2AE35A94C6EF2
D99DF4DA88247C920623978A1DBB81D8F171B588D617AFA8285F6147E889523F
CF11EF4BE498842D3BF8E811B4B33131416658E03293AD911516D8AED556F7E8
0181391AF36D862F5F8B4588BC99585BFF0F1ADE4BF73320158DBACB2784768D
D9794E2B0F2C0696E5ECE5C7A7DE78EB5CAE85EEA244D43D0280D4C87B6B93F4
803718596FBCDB61A0BFC2DC666128E56F3133B9D4F16305940B50ECF66D80BA
06C0A73C02F689314F1B4FAC22D16BB1E414C6F0A1A548AAB1364D2CD9DDFE5E
C8887964D26BE84986A6B1246BC306E6343CA376F990B77BE8D68A4E54304C3F
250B2311586A1D1EAD2C0221FE1828CE8396DEDEF13E70E0AA75FFB6089DBA9E
9FC3FAB43B3633C8EE7598619A0C6FAE2F25274787348E3660D0EB7212F5CB38
032A41A54FDF14B32E721819AEEC54E8FDE3AB8F0ACEA267B01081F284B008C0
5861CEB5C236729AA17DC78E92FE1EF9F047B53A59F2D1D6A6734D0413D1A51F
75B03234F4775523A55978C73D5BF9031EE8BC6BF9E2637DAC07F5AAF2A6C41F
77620B272300A78E86F71F16EBCE2DBFEF4920BD3F16C282E0BA4C872E5F7E52
7ED2B663FE45D4A36A588D228D32E2861F26AA6FA8DDBC8110F4417D0DF29285
F06B57B1720D0D13828A4DD68D57BD530FEB9C3CF305594B70E4394BD60C82DE
A64EC17661977B18199BA661C48860919CBEB56AB6C32848D51733F1E959EA35
DFFD823D92F11065C643AA69776F71163A60D4941B753BBB4A4C0C47BB1D965D
06C9BA1FDAE47926F37C0C5B591058F68FC1DF3933B2BE014F99A53A617A19CD
8BE011234D48CB7E14D31B02B1FC47C8BFBF04C4409D32CB454E8FA0EF9AF16B
8AFE9FDDC41F6A23D700D4AA922A0316A895D240C5595F21FEBA98FE0E74B762
77FCC80F4950A8C55B4A008FD381E9C0EDF4427CB324BE4ABFC790CEB53E8BBE
AA90163A7BB19E2840FDA404E830F5478DD69B85C5E69573D8CDBBDFF41A8126
24A6AB66333C749C35BE314777CC222D54FF2C4C75717FB938724EEDDFC2EC1A
8DA77B5482E760B68F0A2D240332BD48803004BC157C6E8E192D512CE83D5572
D388BAE80AAF5E7240A73CDA7CFF7F8CDAA4ABE1D3BF6ECC3641B6BD1C2CC703
275D48D62A15E5A85F003E76D1EA7DB65E3476CCCF6B504514AEB1FF1263FDB9
81FBF1A1873FC287FC6B6DB11F0FB463637D4F3280EBD19976588F900B956FB4
36AAA8C1F040300CAB9C4F624B22C1D3D6414B7CAD36B5AEEC90105B5A5C2129
4CD540B9D0129813BE7E20870365F8C46FEC92DDB64D0A6C7C5B9867A4592B7C
124B1B47899CE2D1C03811AD1B8BA253B0D29DAF2B53E312827478DBA274010F
C919D122DF24C1E372F7F3CA77A2C0EDCDB2635F4136EA0C202D4011346902E5
1524609DC031656660302CA36D376245A64135890C13A11C0085861792384787
D0831FA01C11F1E7B4429DDAA0B3A7EC1DC3CFEA24C34DA4BC993300F12A953E
80C8BDA360789FCB0F1AEEA7AAC310D0C3C56F43F7914C3B037DA02C31EB740F
2B1A696E0E5553656942BA567DC9C4D3CA06E45EA615B7B5674016DCFA07C0B4
285BFD9D551117A357F4BEFD58BCE60661187A5FF20D27D685B24BEEF563F0C2
B2CFA2565112F7F49023CDD405AF3E54FF994630BE678B0D6E1CED514FC93F7F
63710D289026CEE4B074253E7E0AB1DCCAB57DA7A1E2050D2B8D3D75F2AD7423
0B0A7081DB1FA44055620B0A2CAA54666C5EEE3C01540D96ACAAE98644E1D210
E0E020214550D723431813C031DC7DF0D177E82AE49798F8E0E5AE0BB8FF664E
4793F857BA380297AFB977065B7500E4C0AA1735AF4E15703C860A016F19E593
319D14C497F24ED8E42F3FFEBE976DF33D697656DC11A8A7C6A60219BF63F186
E0FFE55594B31E5C312DBCCA08E84E94E8BF57CD5F5B70EBE59F0D41DD3F6B05
F7635EA92FA9E082C80075A5A5F684160AADAD501BBFA7746327E3E606D1FAC8
EF7AE7C612371BB52FFF41A97A349D111E861A83C9C48B0145ABC3582FCE43C5
D121F0EB6F5D219E52E2BB660AA1DA5551D6B66A732628D640BF9D8BDE2BB3BA
046FBFE2E28DB31AEA2ED8F9405A39C16C3800E9B5611B460BE0F6716F2BF79C
902AD4FA3B6656E13E9DD7A785C17F28BD4D646D66058721610CD756E0D18D32
F09C740B6023DFAD45A718BBFB2E65544D4754A5DB23CC7988A3EF45CD3786F9
E100D9684549A16BC2DB736D43C293097E082A968C27F0C120C41A53E3464381
F7DCFA8B36344EDA85F53FF65BCDACCDE7EAA41A6D38C1F420F8F2E287AB0F98
A0DF7D8A6CF2E4C78D606569BFB7C51495493FACED57CF2D507DDD366247D807
28D73CBBDE2F4F666099411B1FD2CF7B93D0E9AA161024C58892285BCAA65E55
9FB37468777706D2C57A0DF6D520844B56D62CD10F2D7B02D17F97E4F87C16F3
9BA09013FBD7ED8C2DBBB432288E598241369B9DA6E3EE324290D73BDBFB5448
E9D7142036C0FE538F18E866A50DD23152E2C096E1045E7777888AF5CEFB83B1
C6FCA18A26E83D75AB66291A5A5A285DBB1B9525919564600D71A767BB03A8BC
7BF24CC3B318BBC0F40C79835DE6236BB1AC54BEEF1A3335ED4B815C3BA71482
9CA3D96CC07946C91941A53832249E3E5FA7668A0240AC9A7D179D1C2AEB6247
5AD1D3F7F3CC37318A16379424BCF1D8FD89983615A30118566A9B9D40EDEC5E
4A5EC190FF085E5DB40B21B547BE27F6F81FF57E44D274A166071D85D21F3318
FE16859A40AD64A8C869C515A0696A8E3E169A260F525B340DC1C81FED5A23A1
3FBD66C14903239914290A07373ACE6F9ED34CF5FD1C81292D7ECC34894FDCA8
9155E705CE4875605498197A9A796324C46259182E8F03D67D73718EE565F9C9
AE0CBB7FFFEE3BEF3E46AA957F5D1988A3D8F64CA95E2B5EEB919C11032728BF
872D2B0E155A92A4F88A8131629C49ABC0D748DFC2F2D05E4FCA2D8F85E7BA1A
A59392A3376F58135BCFA5DE0696385BB0FFB6345B7836953CFB21EB332B4230
34CF5D6DA93D934D5C58DCA1CBCFD8B711A5D5D489D54379741CBD97D68B58AC
3CC6AF9DEB9E0DF21FD7F0B963053C23FAC30A7C7EB9F3A0F53BBB41B39FACDA
BA8E5726D2F3FF5C1E1748941B7C09F2EA78381AA447F69CB4DADD8E3D4CFBB6
F223F54DE4DD2EB48AAACC4D9471000F7DA25C1F1BDC06C89A7EF137639440B9
C0C1324F63B2C3F80FAFF5CB79F0CADDA33181298849CFEB0F51093A1138EA6A
07CE358D292E226DD18EEA97D706DE894360438F24FD6C4FF1212948925851DF
A147FEB57FE0540F1F9C4DB23E2D4B6574202EF0BA6D0C915A3ABC616E154364
DEAB6CAE6D5D7F9BCADA71E08A4C5EA66C448A40BDA7F695115E70119BA0818F
074AA54EAEEB3374B9A851525B23437C22A229A2033551EF109C18E818B088DD
3299887E2B4E6DF83BD4C8E0D01565FCD740D8C57CCF85B7887E868663D0CFF4
B99C05A3C7BE874BA910AC5639EE5BCDC1F13FCB1D2533DF9EA645AA6B2C8221
056638418B6893A29E7839F2C047CE36884813D3F7A46BA3CF6E6C46F43D51C6
F9BCD8BE7938866A90C323AFA0BC76A54BAA214D84336EE4C8A6BE0745FCD594
C7B3BB829B56A166279017402E475B3881EE9FC1642DF76B87EF82226C25F80F
42A6F73C9316DAA3BC745FB5CF1D70E123AD540CBEDE19B97CB551BE4A6AE8A7
75551ECBD7A8E90EA48AE504AD3ED194C28FB93CBB672A164D74D8EB48F58BC7
351B2010AE95CBAAB2029DE8502CF23C6273A7192A2D29A8A35A71FF8A7C277F
A651C563E3235427373D8FCAABAEC2A51A0A2D8B627E3964E841E4B510A15B25
46F5214F0B7A925251638FA52D3BB76D368EC9FB7C2939C930C647C94A68A4EE
742F487477EADF35C59DD6A4196C4161C05C269683E4A72B049182F2FDD00EF2
18F85575746D6D01F52A504E56A4ED8BAFCCD2356305D5B9A5D6DDE32E82F1FB
9AA82C1B4EA4EF9E89C93C804C5330D4D3C693D20CF7B52A42A9FCA74AFCC7F9
9673A821C351D272A0FD8285E13F8337E602C488374021ACAA0F182625165ECB
FF8AD1DB34303AC60DFCD691201E230AD9F744CC1B6BAE676B57346E7FD268BF
336782A9C1458FC037513D43221453E88EB14742CA236B4C513CB3F95A9F2110
2E64785A12C3FEBCF1D2CC807C0F62A4E1FD329338A720496437A3ABAF58F849
DDC6279B2CDC3D6837B52575D2D79EF56102EAD3ACFE5E3C795733152F1EE780
72533F35DE7DB75C0DF9057415E78C4BD9764450182B4615FF5D9D07C2E2F6ED
347EF008CE308F453454C82CE4824BC1938A6320A7620058ABB11304DAE0609C
3702B332DA3A8CAFAF270B0238ECF07DAA287366E7F1820BA8EEC41AA8135A4F
6467010501E4E53422C8334F94A7F8E434E364E3BD086490014CB4D2EADEA0C7
AABD21EC7C7703D14BAE4568C109A4864C8B851300BF87881F47ECFEE1167C08
592B4F7022754F875448B4FA7124010B065326EEE0D70E2C24270114B24BB61C
36DF20109D56B3E5F4F7B778406F8D61A057A8B49EFBBBC62B522B88D4AE4473
B9556C6B648337944DD3AC545DBA86E84D859005B46DE89A49EFDC8F71AFD68C
254C4C0F5EFCA511BEF579CDE130D1544C626F591B97B72A55F64290BC066B45
21492FFC6BE5DC5EC451D4E6B12933A45B618933561A2D0F8E5E93295DC72E53
0A3DF95A832271C6705D5B3383CB499E7321066ACC7A39450A678D2DF341D00A
96EB52E1620CD68968D4AD7F102D9EDF0CD567BD4400DF69E1AE5516B583EF0C
96A3A58E36B7C82C17C2806104533B7545218BBFA1AA2AF725311302C930D995
3B28756B002D7EB29F5DC309337ACA57E18F94B53775DBE29B24D3F37AD091CF
4869DDC6F41439E43E2D5674AE6918456B1E9D2709CDBC3E3905C754A36E6B5F
DFB8B74E958B183A9166D63B8D7EC63E499CE05211E17FB0EBE925711DFABB23
5DF0398421E48DA0FCFCD09814ABFF7953A0C1CF435B9440D1D5C15BF6356FC1
A7D31CE4F7A214F7C05037EC55E9F6A68044D0CDF51EE4191E7FE9764498BB95
D0702F5D1A6F7C3DF8BB637C2A6D67F637A3CE086387C422962C83D4E4DC6C9D
DB554F90249F3DE26BA41365231D31F008A4B7B3AEAD45AB17324935F6A3
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI10
%!PS-AdobeFont-1.0: CMMI10 003.002
%%Title: CMMI10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI10 known{/CMMI10 findfont dup/UniqueID known{dup
/UniqueID get 5087385 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI10 def
/FontBBox {-32 -250 1048 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI10.) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 120 /x put
dup 121 /y put
dup 122 /z put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBC7878DFBD546AC2
1EF6CC527FEEA044B7C8E686367E920F575AD585387358FFF41BCB212922791C
7B0BD3BED7C6D8F3D9D52D0F181CD4D164E75851D04F64309D810A0DEA1E257B
0D7633CEFE93FEF9D2FB7901453A46F8ACA007358D904E0189AE7B7221545085
EDD3D5A3CEACD6023861F13C8A345A68115425E94B8FDCCEC1255454EC3E7A37
404F6C00A3BCCF851B929D4FE66B6D8FD1C0C80130541609759F18EF07BCD133
78CBC4A0D8A796A2574260C6A952CA73D9EB5C28356F5C90D1A59DC788762BFF
A1B6F0614958D09751C0DB2309406F6B4489125B31C5DD365B2F140CB5E42CEE
88BE11C7176E6BBC90D24E40956279FBDC9D89A6C4A1F4D27EC57F496602FBC4
C854143903A53EF1188D117C49F8B6F2498B4698C25F2C5E8D8BD833206F88FC
BD5B495EB993A26B6055BD0BBA2B3DDFD462C39E022D4A1760C845EA448DED88
98C44BAAB85CD0423E00154C4741240EB3A2290B67144A4C80C88BE3D59AD760
E553DAC4E8BA00B06398B1D0DFE96FB89449D4AE18CE8B27AFE75D2B84EFDB44
143FD887F8FB364D000651912E40B0BAEDDA5AD57A3BC0E411E1AD908C77DCE3
981985F98E258A9BB3A1B845FC4A21BCC54559E51BC0E6C22F0C38540F8C9490
88A0E23EA504FA79F8960CC9D58611C519D3ACDC63FB2FBCAE6674357D7F2285
4BCC9F54D3DA421D744D3A341DA3B494BB526C0734E1A8FC71501745399F7683
FD17EC3044419A88C3979FD2ABA5B0130907B145A8462AAF0A9B511D2C8A7C7F
347FF6AC057E6512902BFD2918E2CD31DE615F5D643764E900B60287670AE18F
FDE15545D8BC69591A8CBBB275AFFC9B14BD68DF0AAB32268FB84844D4DBC7BB
C591C1AC5102C50A9C7BAAA848DA88B0519F0F5F0813BF055CF0E3C86F633A04
B779D2E8E656DB1E09A66A85FE21CA8BA5523F472A229E83F2C4E91ABA46C733
F3C7B5775B06C97782BC225C46385BEBDC61572458EFC5CF4190AB7A9C1C92DA
29F84BAACF552089195966E3AD9E57CC914D20B6962BE80429A16D4DF1ECAA66
36C4343FADF0B2B48F12E2EB8443C4AA29D00949255F3968617F98B8ABD4CC12
048B838EE243A21AC808BD295195E4AE9027005F52258BFCA915C8D9AED9A2C0
80814F79CF943FBE3594C530A22A92E11BE80FCEC1684C4F56712D5846B0749C
9B54A979B315222F209DEE72583B03093EC38F7C5B9F9BCB21DBE8EDDAE9BE8B
75ACE6B12A31083AC8348EC84D1D29D2297A266284B7E9734E207DAF59A25F4E
4AA38509E993C5394FED76E6A2F25462685C4C86C6E8CFC9863338EC1428BDFC
74616BB1BC8948B0ED4C87C15B4405F3A7796F9DB3798FFFE8BD0A94E834817B
D5E9812E308D0CC920470A6F2CD088FCB80462BF7CB3F039A7DF3DAF5B2B5355
E083A385CD2EAF0FC181E40E96DD7E9AB9EF5C7E6866A13B8A54718E950FE097
EF0951A357114F18CE9933D28B3A77AA71E3CE884661F13284BCED5D5FD1A86D
543E588FF473DC2CF9A4DC312500135F29C2D0174B32018C8DBD40EF9A232883
710A1F2AB2CD11312300ACDF789A9B7B93D2035D81D1C84984D92D78A53A00C6
EDA94B24BBAC1AD17774A4E07E6F74ABD90415965616AD540C8ECD8C3A44EE4F
7F4F6BB6238C5062D63FA59B7BF08BE93FAEA70A2AB08FBEAAF7DBF56B95FD93
03CA406543BA6C9527D0DF01F5108D31A51778A5EB1C93F27B72B46146A353A2
01CACBC829603B9989A87CF64528682CCBA0562A8165B185C58A5C6BB72F5E89
500ACCAAB8ECEFBB2640E99EAEEC4EA979AA793D013D61D8ACF8784FF8D9398F
F6A252A709324FB39509F0B3A4E725E82F53543383C6765BE556CC897C758208
AA3AD37B0406E4A79F8F0A6C1983FC73E71CD858C0DB66ED66D5D992978614EE
1EA91EBE191E082EBA1FC040AF19A2202575C2EBEB8058833E3520FA03D2F915
85C1ED337E457B9FEEB0C6EF2735EFDA6E0D05FA641BCF698AC6B97751E8306C
4DF00A39B8581FF53DB8F8525FDB196D85950906CCB59B8EF171349AA3B567B1
6A00819947A995FB383C3C1709C9A2C113B2E40BB832B7D4A0FBA0B16A2C455F
55809CC425C403E9668DC66BE45B71A81C332FD4DB279D22A2959962304A8F18
085893DAC61317D24A8F198FDAB95F3B86F0AFD35047B868A9A17037A2829A02
BAB042F75F349E197A7EED41984C2859754CAFD0251439921C248B463B516951
2E1322C80D73F9CBCAA63A585450275AC2492E4D3FB78E800F788254DB5E610D
CF788DF5C70FF99892BCDF16133E34B24B77C8F097F546B87C603DDB8998B66E
BACB68BA27462AF54AA405682EC96D701F0D474DECD5F95CA2102DF639EB169E
D518162C2BAE45FF698B6DE15FC6E7DE48C336C40A670FD26952A6BAB09115E1
991F0073419F2CC2A1C08BE91096936AA0C37E4ED3CCCEE235476074B8FF1125
6BDE3701F85532D8BB64CCC927CC335281C95EA689706F0AC717DC2CF680C754
E5EFD7FA4BB8880B2B727A964C876D4A223069D4E6001771F0E23EAD2A4BBC80
E76675297B2EF05F52BF4E71B3EE2BE3048CF088C79540113C66AE98B2FD3CB1
B0741A215FD070882C52765009D7D711DAA2508F19AE7DDA15229A856AC49BC3
4DDF40814FF96500E4B9B02D412E94623C5FDCC76C0FB8E42DF56A904FE49D65
1DA7C53901B2EA71AB658A464D3ABDE27D9DB8D9E0B48F64E61A2495AD5D8DAB
B5E72424AD017DF37964AF911BD7FA21A5EB4775DC8E95EF0C0EB856B00D89D7
8172A1DE8530767D317B8256103E53CFB877E10686A04F5A08F8DC58D843DEBA
FD5F40597588663D103689F6EB3EB14D06E18C8078F2538B43E712DF491FC5C6
AF639256C8C6134B64D560D8476DEA6329D995E46CC4BC78841C59E73648B47E
BFA7DE0846422F738454AE77E822A083405289247BD7C478BE4974F742CD6051
E99FBB1D1B3FBABFEE855174734EE45E87D0AADF32B1283B911162A9955847FD
38944D70584FAA6B1A7191C5C134B73F98EB632B69E2F0C0F94156787C34C8A3
7622A029D58F9626B74F8A8A1F3803E0BC20E0EADEB1E99B70F1BD9F980FB751
2A842843DE42EB142A84D5D3138629AE9EAF6F3479C423E8829C8816FA6EFA27
DCE5580E65AA9854B1C64163DC318420CD993C15BFD76A8BA1182860A6B03D6D
22B8CF43CFE6C8AB27C64842E239CAE707D3086BADDE1D7C94E3BC96319470D6
8D26915C575CFDD03271D6BB9DE86A0EB6EEA6E768B224A626C62A9AB48A6EDB
44F70BB5AF991CDF9736D65933E81CC57A78F623F33EC9AF535F2F25FA4EEC90
D50DB7E87F31E971A75A33A301CA6013EEC5A4E179D695B33DADF2C98364434A
42926776000B610E17524162253F6FA638D6581C18F99EA0BD1D2E24D2424ADF
C05010D08192485153DD03930C7BF45237593E484F9851E6D464FA10FECA5D9E
0C8CCC97DE029030900CDBB491C5CF226DBF903CFE7735D939C3FDF3A20B70CE
66579B28B99313FEE914E295388C7BC8E055A2E54EA3A8206D3C8F4F7C0BA5E6
E519419FD8CE215F7B8E9BEC604A9E3FE272A0328A24E31997C8A91E0946BCF1
6943A97CBED2AB9FC636B49828BBB8B89E0BBC2653796431224895ABA5DAC41E
1854BD9764E86147FD7624F736F40DE3B7582EDDFD15C2BDE3F22B5A54D7DF10
B87A1301CE85CFC061689A890A321412A13314AE96DCD3EDA75035FDD8F4AB9B
897A2C68263A68457032C469987970648BA2D88B1C5375DFEAA35A917B8A952E
EE670427942AEDB3CB599C5746180E392837D371E15D860620ABDB6AA7772C40
A5E346661673ACA530BE3D8E3FFB895E5DA3DC23B1B43C080C77F7E47847F0F3
F3AA5CA9E4BF75FC5EBD18D19F21A7DAA3B11CABC6E4070A15F7DBC8B05EB6AA
A02EF1B078EB66D61D6AFE41DA9B36FE7EC9EF94D1EA26282A9871E2CACB3126
2AD49C2D9B50A6E47D8F2CCAD50992D1B430979A45FD9E76182A19964BB2A1F6
51779A2B258DC1DF4C2F3074621286831F3848AC152DDD2BA561E6586ADA88D3
598A2CE2CD048F027CE0008B828BD915887D7785341E8305DF2346ADB76BE99F
87B02173BDC334E9221C8DF54114A6B24C1C5340299512FA6C8C51AB4C8778CE
178CEF531C6D1B5FF0A1BE8EFF767F959BD4C345C52699A29A17B2A230842BF6
4B011217D6D24EDAC3F6D53482786F1CA33169B90ECD499407D37CE9B70DDF78
7B7547B32952535BA9ACD1E244447AE3FCED3AF28717083CF9590A09780984D6
AF0743C82AE4FB3E2BB2856A4153A3967A023FFC35382D6C22D84A924900B6A6
3DDD400E6D2418DA6C27F2FA34C075C902B89EBAE658B3C9A18EEE449DA5A379
337DE95CB7AB3F0970CF1A5D8FAD8090E495570FDFB2FBBA79244780D8035547
C5A55BB21A2270F724BF5D442CDC5BB9F09BE0CAE59B1C2270F0BDACE698F2C5
DE8F66BFB9634904B161F5BA2B1950048300D69BABD312D58D89C4ED527AF7BA
7DA2478EDC2CDEE3473DD8A8ED9D891CD1FC21F23013228BB3281B71FCE959BD
6F8E9059D682A7FCC5265A0620992D4FA8D78377EB34CE3ECA070EE3707239BC
98907DB0120CE42ABA32CF97127E28382BDDFD685674279F588D4F951216C355
821361790F64C2CC720DE97E8ECB57326C43EE47367628E05769E106868B54F4
C33C9951908DF6FC4F5ED2C7787BD8FA591BBB3E9C6C1DA94CC5E38D9B20C886
7D237572FF46DD896A4D6163408EA6CEFAC398EE041EAE29D577E75326CA17A6
B072D47A7B13EC441CE6DAA042ECD02134CBFA6809A435050413817193DAEB16
A5882C8AEA44BCF36E74E9ECCDFE7E19FF5A5DD7A94E5AB4F8702C3DA7F42325
23C808670A0490F5B373DADE40814FF9650241D3D69C91FBC5ECE728F827D9BF
C928602E05477903449E079164CA39859C4BCA60C579F490AA455F82B5050BB3
969AFB478E0D4A257B3356EA3CD62051FCE6C6B1929CFF85BFDF166BEF658E10
3A55E007F38EBBB248B3F0B8ED1925106B499B762E45113AE1AC9DE09644C84B
9C08034B297314EE69BC32DB6E7D7FB9913CE5AC17E7335979E9DCCE2BAB3725
1976155551F9706A576FE0E3ADCCF72C87683291528ECB749CB0ED291966E239
B5E3630676BD409E08F85BC1AEC9A2D4135376284A96EA24431243BD6FE8B966
95F11A4BB53F392E0AEFEA623064FF8A7002367B0A515635CB2D2DDFB9B4A8D7
FE721754E81BBA548848A235B91AD4E4F7DB19CCE2F61D277FC00AB956EB93BE
44AB4970CA56BF59506C94ED160FB1E25D3DF2988A532BDB787BFB8539D22986
FDC378AC31444E63C4727FEE121A43751043849E6DCAC5B59D0FC703AAFBBFD4
E8B7C268F21615AD02CE9DABEFA27B5FE6A6441B619539CAB1F810F1263447AA
633F5DAF483752EF1A0421740E3A811D2D2898CBF53E7F686C9223FD7235F02D
6F90D2D48CC20AB87778DE3C6FB335E0F0EC20B5DC5B65223FE117526DE2C72F
FE839DF93CB2A7D66CD900CB325F891E311BEC932F703FB4FEFA29DB8B9C88DD
375EC71B3D58C7BC59ADA91971A3BDA1ADEA629CE6CC92BD542CDDFAA7706FB2
6CDDE2DF07E56D6741916AE8E8744339816F3E6C38062747AA9FDA2A2678A6B7
EFEA870AA3A4D71B25EE3013EAB1DBA34401B867C7A41AE51E0421D41D3BB83C
E120C8FEABA6E5DEC53A689C21426D4BBCB68CB37568761C360E6D4E3596FB7D
F4DEC7918E58C0293D12D6DDA7E9DCDAAD7C939F55CD1BC4A228B31E9A904156
DA6B40B08E6ACE674618B768DD681C772A3E55FE096CF949CF3B0460ABDCD891
D17B37B355B29AB5137899C036F31DA026244FA25FB798FBE5105BDA29F46538
D3D3AC1001A7BCECE64DE94FFE6C354166A0F97256137BDFA07F6E22A3D1D2F4
9588DBAE95E895BC5E64DDCBBAA8D0A22C229B42CB717FC711E7E9DF793DF80B
9F14754585A3C7E17F37B32924B9F9870DA8635E3E18BD1DCD81EDF01834D9C6
B33F23C956C2FCBFA47D84422F583459D827D1E120B97694D12F1F54D02379C0
D288F7104F3FFCF4F76E3494F4ACBD1BE3A15543CC680924C78A473F8E311ADF
8FE00A04C6C393DE61AD3EDA5BC031E2353076A2489391B52632387CA28A7B93
FBB065A6EF3658AE80B1ADA47E9B2539E73A71FA75645F85ED8ECC257FB4CF26
B6C912DE9D0F9899E70BECCB934AD32CF49A093371A9F73DE6255EBC39DE1E7F
00D0CBDABD4D0383977E694890E71FBE5C376BE5F3A80C28987417504F515C50
909F3D31178BB9B1D085BE514F71B910A9085BD6122DDC72A150BFE266920E49
5661BCB4BAB51D6DEFE32B616963DBD989FCDD1637B294CE4E288655FBEFA1BF
7F25BBF8CF17C2D5FD161A7C2CC9CC7490D9BF15A1D35B3BFA43ADE256E88BDA
BD490D92907C57BAC408A575EC84D6AEE070148C7C9A91C03B09FDBD792E8FF0
C0B886AAD2EDD86541E5E579359D40E3AC312ACD3D8FD49F71BD533DDF8859B1
BAF17F1884E331DD07CEEF93B71D492AEBAADF7A263450A7A72210CE630A0D37
BF024BDC09ACC882816B8C22C62AE38A3A8D0F6EBC2B1B2C0B8161A8B076DD5D
4B779C0788546BB4CF57332230D237856B00D79C28A7C01D11F44B7304F69075
94B97A745DA43D1BE561372CE611C345A843834E46AD9DDB16CABCD3FA33D6F1
F6B5C0497F5EE5400B305CDC16A7EC286AA4D45D0EEBB9DA06AC9C5294D68EC9
E4DC3CA2B92CE8FC0526184A86EDC7AB34D67E60AC12D9CA8FD300235EC968BA
92C6FBDA47572BC5600F25249F60AD287CBDAE980E747FCBE7EE5CD323E733F0
63553B494D3DDEB9CC1480B5C3BB79A28E419AA65B18CB297AB383419E890E2A
CE6F98C9900CCB4675280A10CF060B8D220DDA1BE55DFA65715EABCC1AFAA271
B1F8732341613E17B231231A0D24D4D7FC198AE04D89A99C4536217769C6FBD9
5EE24A6302F97438F7C0E311C878F674B4477A5ADA3952CDE4055AC408B8174E
86F8FB797646DFFFE0ECA25D1BAB9A9F71F3926D3D85AA63E7A8C931D71E79E0
AF1EAC26FADE468F4FF7F3861D14C10E3BE1F9EAFD6D3A544E8108D5DAB5B180
3950C74818BC8AF4758A108F462EF1826647A49667F5E482038C54716856D9BC
35F29922846D2148F92F943E951D7438C73D6A60459A8003174036C64E1629CD
155D47FD04B03C023AD67CD5A70C98AB556EEAB8C48169706E5B352F6505D580
AC945171BFE62E81F8F500438AC3B64D857BA5BC54C2C4BBB237F8FA51296255
E66A92A61FE13FDE781D393557EB72CEBAD86511035F775FAC39A0479CCD400F
226709118F887F47CC2ECC8F79816D4A945B2845F50AFD62D8C9A9BBF4739496
9E644BC9F7B04803B7EE75A09EAE94365F6F374B4FCEB0B506C76297564B9B6B
8B812BC3A33929AA94692572B010E6210AEAA312BDFC88BF302244AB9D587A9B
919823FD01DE12438D960944D1977800FEB49E638C32E5B188B1CA033E0C37EE
A142F746367888AA119535F0CCAF7EAA461B790EB089D2D6962E28A398439BB7
9C9943654D7A2D765B46BC0DD1F915327F369162E1BA1BA83110B93F442905E0
523BFF5E279508A98568CD5CFD18FABBE9D17265A9081E7BF64155A2CE3C0DF7
88D00671AD65654709589BAD7EA65BBA811387ABA5CA0BC3F66D3D48597A0D1D
2C268375DF47CCF62166262AE4840AB03BF49BE67A05EF66328EC729F03CA5FF
AD3937FC053E223303565DC771ACF32E63DFB96D5030E787961D72D02C195C66
B48E9AF0309DC169CFE8D16E2818DA94693A18F027DEA0D91051800EE6C54285
AB0594D87D05EB4CB44FFC094DA0072AE7D4BF2F4F9BB812FED256B937BC2574
8C529F97ABA6DAD956BFFC367448EB7FE9D1975B82DF29D520370354429740FD
C55226BF63CA700BBB868F713AE6B4B891BF47CC2EAF14877F5FC21C72AE41F4
BEF155B28ACF0458F6D0913972E771285FA368EF7CD55F0E5E3B2B5BC4C9E8A7
CAC89667C966C7A0517B909E752ED2A2CD604BDCE93D2247D5A603D163CAA250
AEBF479535C34E5063E67207C507454F2A76A45B776B4B3C9916D9E8C94EC2FB
ABAE3552F71CE1FFE48C00554707A2604897546FDFBBE0F36410A80C6ED763BD
FE16CAD8A4692FC306F233975885DD6FA5DEEC88203E9221F67484DD83BDA8B1
09E906D0F26B9A904F60972705AB65BC5AFD9F9E350380FCB4B0276A0524535A
489B8F4E1ACA2ECBBA8EED513EFCC0E61882E371793A223DBBD5CFB45E4BBFB3
9D76E3373F09A57CB319998018CA7F1668CB52A00D2A330B3C0148E8CEE1746A
8BACFEB7CD75153978B12F6C833C529DAC0B63B24331CC999DA586BA10EAD9BF
226E611343378B8EE055FEFB398CF5A5215BC258199F98E594D65CAAF1DE621D
E4238BAFDE59DBC4AB69ADC77FB529BD2B1651BCF681AABE01A9189B4AC46955
DC0E8776A4C401B26E9253B2C5A07B4FC5CC72C9446AB884E2A350DE6F15EFAF
FB8F8510E2111E626F610EF1CC6911CFFAA0BFC434427B24FADC2B17906D07A1
FD6C56353A1F380F0DA2E05572DF4AFB3E28EC60E246D67A7ACD60B40ACA4D5B
5E7EABC6F39FAF23733D26E39CB1C7570338EF118DC382765090D6186886838A
9D1CD12830A595C27E93518B2E8DA5FAB0BE98975FC904616C05847C2F4A6836
319BAA06093DAD6DC72F947D4881E671220AC0DC04A8CE0DAA2C226030231690
AA1FCAC639911ED82336AC8F20AA5B3139D2E9F427B4ABD6F75964E494D79A5C
5D8D57C6E5BE66B0FF7B1AFA5DFB1E5D47A794303BADA2DA1D6E6BB5A5387F6A
FA7A5759A7C28A47E311C3769B5540215849F146C3466AF12B106F2476AFD38C
8C9AB214D0509089311B5D156D95730263D499ECB79D31BFAA80C64686F2C3DD
38AB1A4BA1D580785EFB26D4971EAEA6B8962EEEB18C028E667FE28460E92BFC
91FB7828FEAF29CEFC8E1983
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 40258437 52099151 1000 600 600 (00-00-1.dvi)
@start /Fa 204[33 33 33 49[{}3 58.1154 /CMR7 rf /Fb 198[35
35 35 35 35 35 35 35 35 35 2[24 45[{}11 66.4176 /CMSS8
rf /Fc 133[39 41 47 120[{}3 83.022 /CMMI10 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
/setpagedevice where
{ pop << /PageSize [612 792] >> setpagedevice }
{ /letter where { pop letter } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
515 440 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 515 440 a 515 440 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 515 440 a 515 440 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 515
440 a 515 440 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 515 440 a 1584 1621 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 45.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -5 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   28.45274 mul exch 28.45274 mul exch  } false /N@xMin
10 {InitPnode } /NodeScale {} def NewNode end  end
 1584 1621 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.5 SLW 1 0 0  setrgbcolor  end
 
@endspecial 1584 1621 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 45.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 5 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   28.45274 mul exch 28.45274 mul exch  } false /N@xMax
10 {InitPnode } /NodeScale {} def NewNode end  end
 1584 1621 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.5 SLW 1 0 0  setrgbcolor  end
 
@endspecial 1584 1621 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 45.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   28.45274 mul exch 28.45274 mul exch  } false /N@yMin
10 {InitPnode } /NodeScale {} def NewNode end  end
 1584 1621 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.5 SLW 1 0 0  setrgbcolor  end
 
@endspecial 1584 1621 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 45.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 5 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   28.45274 mul exch 28.45274 mul exch  } false /N@yMax
10 {InitPnode } /NodeScale {} def NewNode end  end
 1584 1621 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.5 SLW 1 0 0  setrgbcolor  end
 
@endspecial 1584 1621 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 45.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   28.45274 mul exch 28.45274 mul exch  } false /N@zMin
10 {InitPnode } /NodeScale {} def NewNode end  end
 1584 1621 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.5 SLW 1 0 0  setrgbcolor  end
 
@endspecial 1584 1621 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 45.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 5 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   28.45274 mul exch 28.45274 mul exch  } false /N@zMax
10 {InitPnode } /NodeScale {} def NewNode end  end
 1584 1621 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.5 SLW 1 0 0  setrgbcolor  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax load GetCenter
} { 0 0 } ifelse end tx@NodeDict begin tx@NodeDict /N@xMin known {
/N@xMin load GetCenter } { 0 0 } ifelse end   /Lineto /lineto load
def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def
} if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 1 0 0  setrgbcolor  1.
.setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax load GetCenter
} { 0 0 } ifelse end tx@NodeDict begin tx@NodeDict /N@yMin known {
/N@yMin load GetCenter } { 0 0 } ifelse end   /Lineto /lineto load
def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def
} if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 1 0 0  setrgbcolor  1.
.setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.5
SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax load GetCenter
} { 0 0 } ifelse end tx@NodeDict begin tx@NodeDict /N@zMin known {
/N@zMin load GetCenter } { 0 0 } ifelse end   /Lineto /lineto load
def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def
} if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.5 SLW 1 0 0  setrgbcolor  1.
.setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 1584 1621 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1584 1621 a 1584
1621 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1584 1621 a 1584 1621 a
tx@Dict begin { 5.0 5.71527 4.30554 0.0 180.  Uput UUput } PutCoor
PutBegin  end
 1584 1621 a 1560 1639
a Fc(x)1584 1621 y
tx@Dict begin  PutEnd  end
 1584 1621 a 1584 1621 a
tx@Dict begin  PutEnd  end
 1584 1621
a 1584 1621 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1584 1621 a 1584 1621 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1584 1621 a 1584
1621 a
tx@Dict begin { 5.0 5.2616 4.30554 1.94444 0.  Uput UUput } PutCoor
PutBegin  end
 1584 1621 a 1562 1631 a Fc(y)1584 1621 y
tx@Dict begin  PutEnd  end
 1584
1621 a 1584 1621 a
tx@Dict begin  PutEnd  end
 1584 1621 a 1584 1621 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1584 1621
a 1584 1621 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1584 1621 a 1584 1621 a
tx@Dict begin { 5.0 5.0903 4.30554 0.0 90.  Uput UUput } PutCoor PutBegin
 end
 1584 1621 a 1563
1639 a Fc(z)1584 1621 y
tx@Dict begin  PutEnd  end
 1584 1621 a 1584 1621 a
tx@Dict begin  PutEnd  end
 1584
1621 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 1.0 0.100000000000000000
0 1.0 -0.100000000000000000 0  tx@3DPlotDict begin   /RotX 0.  def
/RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec
0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0
def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 45.  def /Beta
30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def
/Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2
mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid
true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if
/eulerRotation false def RotSet (set ) eq currentdict /MnewTOold known
not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion def}
{RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion
def} {/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end  /Lineto
/lineto load def 1  setlinejoin false   NArray n 0 eq not { n 1 eq
{ 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 1 0 0  setrgbcolor
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 1584 1621
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 45.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 1.0 -0.400000000000000000 0 1.0 mul /z ED 1.0 mul /y
ED 1 mul /x ED ConvertTo2D x2D y2D end   28.45274 mul exch 28.45274
mul exch  } false /N@temp@pstNode 10 {InitPnode } /NodeScale {} def
NewNode end  end
 1584 1621 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.5 SLW 1 0 0  setrgbcolor  end
 
@endspecial
1584 1621 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 1584 1621 a 1584 1621 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(keep ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 1584 1621 a Fb(1)1619
1621 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 1619 1621 a 1584 1621 a
tx@Dict begin  PutEnd  end
 1584 1621 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 2.0 0.100000000000000000
0 2.0 -0.100000000000000000 0  tx@3DPlotDict begin   /RotX 0.  def
/RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec
0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0
def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 45.  def /Beta
30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def
/Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2
mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid
true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if
/eulerRotation false def RotSet (set ) eq currentdict /MnewTOold known
not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion def}
{RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion
def} {/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end  /Lineto
/lineto load def 1  setlinejoin false   NArray n 0 eq not { n 1 eq
{ 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 1 0 0  setrgbcolor
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 1584 1621 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 45.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 2.0 -0.400000000000000000 0 1.0 mul /z ED 1.0 mul /y
ED 1 mul /x ED ConvertTo2D x2D y2D end   28.45274 mul exch 28.45274
mul exch  } false /N@temp@pstNode 10 {InitPnode } /NodeScale {} def
NewNode end  end
 1584 1621 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.5 SLW 1 0 0  setrgbcolor  end
 
@endspecial 1584 1621 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 1584 1621 a 1584
1621 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(keep ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 1584 1621 a Fb(2)1619 1621 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 1619 1621 a 1584
1621 a
tx@Dict begin  PutEnd  end
 1584 1621 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 3.0 0.100000000000000000
0 3.0 -0.100000000000000000 0  tx@3DPlotDict begin   /RotX 0.  def
/RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec
0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0
def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 45.  def /Beta
30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def
/Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2
mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid
true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if
/eulerRotation false def RotSet (set ) eq currentdict /MnewTOold known
not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion def}
{RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion
def} {/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end  /Lineto
/lineto load def 1  setlinejoin false   NArray n 0 eq not { n 1 eq
{ 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 1 0 0  setrgbcolor
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
1584 1621 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 45.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 3.0 -0.400000000000000000 0 1.0 mul /z ED 1.0 mul /y
ED 1 mul /x ED ConvertTo2D x2D y2D end   28.45274 mul exch 28.45274
mul exch  } false /N@temp@pstNode 10 {InitPnode } /NodeScale {} def
NewNode end  end
 1584 1621 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.5 SLW 1 0 0  setrgbcolor  end
 
@endspecial
1584 1621 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 1584 1621 a 1584 1621 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(keep ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 1584 1621 a Fb(3)1619
1621 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 1619 1621 a 1584 1621 a
tx@Dict begin  PutEnd  end
 1584 1621 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 4.0 0.100000000000000000
0 4.0 -0.100000000000000000 0  tx@3DPlotDict begin   /RotX 0.  def
/RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec
0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0
def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 45.  def /Beta
30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def
/Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2
mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid
true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if
/eulerRotation false def RotSet (set ) eq currentdict /MnewTOold known
not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion def}
{RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion
def} {/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end  /Lineto
/lineto load def 1  setlinejoin false   NArray n 0 eq not { n 1 eq
{ 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 1 0 0  setrgbcolor
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 1584 1621 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 45.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 4.0 -0.400000000000000000 0 1.0 mul /z ED 1.0 mul /y
ED 1 mul /x ED ConvertTo2D x2D y2D end   28.45274 mul exch 28.45274
mul exch  } false /N@temp@pstNode 10 {InitPnode } /NodeScale {} def
NewNode end  end
 1584 1621 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.5 SLW 1 0 0  setrgbcolor  end
 
@endspecial 1584 1621 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 1584 1621 a 1584
1621 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(keep ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 1584 1621 a Fb(4)1619 1621 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 1619 1621 a 1584
1621 a
tx@Dict begin  PutEnd  end
 1584 1621 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ -1.0 0.100000000000000000
0 -1.0 -0.100000000000000000 0  tx@3DPlotDict begin   /RotX 0.  def
/RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec
0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0
def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 45.  def /Beta
30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def
/Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2
mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid
true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if
/eulerRotation false def RotSet (set ) eq currentdict /MnewTOold known
not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion def}
{RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion
def} {/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end  /Lineto
/lineto load def 1  setlinejoin false   NArray n 0 eq not { n 1 eq
{ 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 1 0 0  setrgbcolor
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
1584 1621 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 45.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1.0 -0.400000000000000000 0 1.0 mul /z ED 1.0 mul /y
ED 1 mul /x ED ConvertTo2D x2D y2D end   28.45274 mul exch 28.45274
mul exch  } false /N@temp@pstNode 10 {InitPnode } /NodeScale {} def
NewNode end  end
 1584 1621 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.5 SLW 1 0 0  setrgbcolor  end
 
@endspecial
1584 1621 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 1584 1621 a 1584 1621 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(keep ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 1584 1621 a Fb(-1)1643
1621 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 1643 1621 a 1584 1621 a
tx@Dict begin  PutEnd  end
 1584 1621 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ -2.0 0.100000000000000000
0 -2.0 -0.100000000000000000 0  tx@3DPlotDict begin   /RotX 0.  def
/RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec
0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0
def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 45.  def /Beta
30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def
/Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2
mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid
true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if
/eulerRotation false def RotSet (set ) eq currentdict /MnewTOold known
not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion def}
{RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion
def} {/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end  /Lineto
/lineto load def 1  setlinejoin false   NArray n 0 eq not { n 1 eq
{ 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 1 0 0  setrgbcolor
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 1584 1621 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 45.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -2.0 -0.400000000000000000 0 1.0 mul /z ED 1.0 mul /y
ED 1 mul /x ED ConvertTo2D x2D y2D end   28.45274 mul exch 28.45274
mul exch  } false /N@temp@pstNode 10 {InitPnode } /NodeScale {} def
NewNode end  end
 1584 1621 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.5 SLW 1 0 0  setrgbcolor  end
 
@endspecial 1584 1621 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 1584 1621 a 1584
1621 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(keep ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 1584 1621 a Fb(-2)1643 1621 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 1643 1621 a 1584
1621 a
tx@Dict begin  PutEnd  end
 1584 1621 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ -3.0 0.100000000000000000
0 -3.0 -0.100000000000000000 0  tx@3DPlotDict begin   /RotX 0.  def
/RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec
0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0
def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 45.  def /Beta
30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def
/Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2
mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid
true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if
/eulerRotation false def RotSet (set ) eq currentdict /MnewTOold known
not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion def}
{RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion
def} {/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end  /Lineto
/lineto load def 1  setlinejoin false   NArray n 0 eq not { n 1 eq
{ 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 1 0 0  setrgbcolor
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
1584 1621 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 45.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -3.0 -0.400000000000000000 0 1.0 mul /z ED 1.0 mul /y
ED 1 mul /x ED ConvertTo2D x2D y2D end   28.45274 mul exch 28.45274
mul exch  } false /N@temp@pstNode 10 {InitPnode } /NodeScale {} def
NewNode end  end
 1584 1621 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.5 SLW 1 0 0  setrgbcolor  end
 
@endspecial
1584 1621 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 1584 1621 a 1584 1621 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(keep ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 1584 1621 a Fb(-3)1643
1621 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 1643 1621 a 1584 1621 a
tx@Dict begin  PutEnd  end
 1584 1621 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ -4.0 0.100000000000000000
0 -4.0 -0.100000000000000000 0  tx@3DPlotDict begin   /RotX 0.  def
/RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec
0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0
def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 45.  def /Beta
30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def
/Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2
mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid
true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if
/eulerRotation false def RotSet (set ) eq currentdict /MnewTOold known
not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion def}
{RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion
def} {/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end  /Lineto
/lineto load def 1  setlinejoin false   NArray n 0 eq not { n 1 eq
{ 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 1 0 0  setrgbcolor
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 1584 1621 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 45.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -4.0 -0.400000000000000000 0 1.0 mul /z ED 1.0 mul /y
ED 1 mul /x ED ConvertTo2D x2D y2D end   28.45274 mul exch 28.45274
mul exch  } false /N@temp@pstNode 10 {InitPnode } /NodeScale {} def
NewNode end  end
 1584 1621 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.5 SLW 1 0 0  setrgbcolor  end
 
@endspecial 1584 1621 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 1584 1621 a 1584
1621 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(keep ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 1584 1621 a Fb(-4)1643 1621 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 1643 1621 a 1584
1621 a
tx@Dict begin  PutEnd  end
 1584 1621 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ -5.0 0.100000000000000000
0 -5.0 -0.100000000000000000 0  tx@3DPlotDict begin   /RotX 0.  def
/RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec
0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0
def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 45.  def /Beta
30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def
/Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2
mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid
true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if
/eulerRotation false def RotSet (set ) eq currentdict /MnewTOold known
not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion def}
{RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion
def} {/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end  /Lineto
/lineto load def 1  setlinejoin false   NArray n 0 eq not { n 1 eq
{ 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 1 0 0  setrgbcolor
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
1584 1621 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 45.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -5.0 -0.400000000000000000 0 1.0 mul /z ED 1.0 mul /y
ED 1 mul /x ED ConvertTo2D x2D y2D end   28.45274 mul exch 28.45274
mul exch  } false /N@temp@pstNode 10 {InitPnode } /NodeScale {} def
NewNode end  end
 1584 1621 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.5 SLW 1 0 0  setrgbcolor  end
 
@endspecial
1584 1621 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 1584 1621 a 1584 1621 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(keep ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 1584 1621 a Fb(-5)1643
1621 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 1643 1621 a 1584 1621 a
tx@Dict begin  PutEnd  end
 1584 1621 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 0 1.0 0.100000000000000000
0 1.0 -0.100000000000000000  tx@3DPlotDict begin   /RotX 0.  def /RotY
0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.
 def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def
/RotSequence (xyz ) def /RotSet (keep ) def /Alpha 45.  def /Beta 30.
 def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2
Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def
/Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true
def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation
false def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end  /Lineto
/lineto load def 1  setlinejoin false   NArray n 0 eq not { n 1 eq
{ 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 1 0 0  setrgbcolor
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 1584 1621 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 45.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -0.200000000000000000 1.0 0 1.0 mul /z ED 1.0 mul /y
ED 1 mul /x ED ConvertTo2D x2D y2D end   28.45274 mul exch 28.45274
mul exch  } false /N@temp@pstNode 10 {InitPnode } /NodeScale {} def
NewNode end  end
 1584 1621 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.5 SLW 1 0 0  setrgbcolor  end
 
@endspecial 1584 1621 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 1584 1621 a 1584
1621 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(keep ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 1584 1621 a Fb(1)1619 1621 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 1619 1621 a 1584
1621 a
tx@Dict begin  PutEnd  end
 1584 1621 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 0 2.0 0.100000000000000000
0 2.0 -0.100000000000000000  tx@3DPlotDict begin   /RotX 0.  def /RotY
0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.
 def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def
/RotSequence (xyz ) def /RotSet (keep ) def /Alpha 45.  def /Beta 30.
 def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2
Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def
/Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true
def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation
false def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end  /Lineto
/lineto load def 1  setlinejoin false   NArray n 0 eq not { n 1 eq
{ 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 1 0 0  setrgbcolor
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
1584 1621 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 45.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -0.200000000000000000 2.0 0 1.0 mul /z ED 1.0 mul /y
ED 1 mul /x ED ConvertTo2D x2D y2D end   28.45274 mul exch 28.45274
mul exch  } false /N@temp@pstNode 10 {InitPnode } /NodeScale {} def
NewNode end  end
 1584 1621 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.5 SLW 1 0 0  setrgbcolor  end
 
@endspecial
1584 1621 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 1584 1621 a 1584 1621 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(keep ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 1584 1621 a Fb(2)1619
1621 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 1619 1621 a 1584 1621 a
tx@Dict begin  PutEnd  end
 1584 1621 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 0 3.0 0.100000000000000000
0 3.0 -0.100000000000000000  tx@3DPlotDict begin   /RotX 0.  def /RotY
0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.
 def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def
/RotSequence (xyz ) def /RotSet (keep ) def /Alpha 45.  def /Beta 30.
 def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2
Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def
/Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true
def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation
false def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end  /Lineto
/lineto load def 1  setlinejoin false   NArray n 0 eq not { n 1 eq
{ 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 1 0 0  setrgbcolor
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 1584 1621 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 45.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -0.200000000000000000 3.0 0 1.0 mul /z ED 1.0 mul /y
ED 1 mul /x ED ConvertTo2D x2D y2D end   28.45274 mul exch 28.45274
mul exch  } false /N@temp@pstNode 10 {InitPnode } /NodeScale {} def
NewNode end  end
 1584 1621 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.5 SLW 1 0 0  setrgbcolor  end
 
@endspecial 1584 1621 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 1584 1621 a 1584
1621 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(keep ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 1584 1621 a Fb(3)1619 1621 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 1619 1621 a 1584
1621 a
tx@Dict begin  PutEnd  end
 1584 1621 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 0 4.0 0.100000000000000000
0 4.0 -0.100000000000000000  tx@3DPlotDict begin   /RotX 0.  def /RotY
0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.
 def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def
/RotSequence (xyz ) def /RotSet (keep ) def /Alpha 45.  def /Beta 30.
 def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2
Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def
/Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true
def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation
false def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end  /Lineto
/lineto load def 1  setlinejoin false   NArray n 0 eq not { n 1 eq
{ 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 1 0 0  setrgbcolor
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
1584 1621 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 45.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -0.200000000000000000 4.0 0 1.0 mul /z ED 1.0 mul /y
ED 1 mul /x ED ConvertTo2D x2D y2D end   28.45274 mul exch 28.45274
mul exch  } false /N@temp@pstNode 10 {InitPnode } /NodeScale {} def
NewNode end  end
 1584 1621 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.5 SLW 1 0 0  setrgbcolor  end
 
@endspecial
1584 1621 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 1584 1621 a 1584 1621 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(keep ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 1584 1621 a Fb(4)1619
1621 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 1619 1621 a 1584 1621 a
tx@Dict begin  PutEnd  end
 1584 1621 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 0 -1.0 0.100000000000000000
0 -1.0 -0.100000000000000000  tx@3DPlotDict begin   /RotX 0.  def /RotY
0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.
 def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def
/RotSequence (xyz ) def /RotSet (keep ) def /Alpha 45.  def /Beta 30.
 def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2
Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def
/Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true
def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation
false def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end  /Lineto
/lineto load def 1  setlinejoin false   NArray n 0 eq not { n 1 eq
{ 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 1 0 0  setrgbcolor
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 1584 1621 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 45.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -0.200000000000000000 -1.0 0 1.0 mul /z ED 1.0 mul /y
ED 1 mul /x ED ConvertTo2D x2D y2D end   28.45274 mul exch 28.45274
mul exch  } false /N@temp@pstNode 10 {InitPnode } /NodeScale {} def
NewNode end  end
 1584 1621 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.5 SLW 1 0 0  setrgbcolor  end
 
@endspecial 1584 1621 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 1584 1621 a 1584
1621 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(keep ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 1584 1621 a Fb(-1)1643 1621 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 1643 1621 a 1584
1621 a
tx@Dict begin  PutEnd  end
 1584 1621 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 0 0.100000000000000000
1.0 0 -0.100000000000000000 1.0  tx@3DPlotDict begin   /RotX 0.  def
/RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec
0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0
def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 45.  def /Beta
30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def
/Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2
mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid
true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if
/eulerRotation false def RotSet (set ) eq currentdict /MnewTOold known
not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion def}
{RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion
def} {/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end  /Lineto
/lineto load def 1  setlinejoin false   NArray n 0 eq not { n 1 eq
{ 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 1 0 0  setrgbcolor
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
1584 1621 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 45.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0.200000000000000000 1.0 1.0 mul /z ED 1.0 mul /y ED
1 mul /x ED ConvertTo2D x2D y2D end   28.45274 mul exch 28.45274 mul
exch  } false /N@temp@pstNode 10 {InitPnode } /NodeScale {} def NewNode
end  end
 1584 1621 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.5 SLW 1 0 0  setrgbcolor  end
 
@endspecial
1584 1621 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 1584 1621 a 1584 1621 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(keep ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 1584 1621 a Fb(1)1619
1621 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 1619 1621 a 1584 1621 a
tx@Dict begin  PutEnd  end
 1584 1621 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 0 0.100000000000000000
2.0 0 -0.100000000000000000 2.0  tx@3DPlotDict begin   /RotX 0.  def
/RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec
0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0
def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 45.  def /Beta
30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def
/Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2
mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid
true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if
/eulerRotation false def RotSet (set ) eq currentdict /MnewTOold known
not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion def}
{RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion
def} {/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end  /Lineto
/lineto load def 1  setlinejoin false   NArray n 0 eq not { n 1 eq
{ 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 1 0 0  setrgbcolor
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 1584 1621 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 45.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0.200000000000000000 2.0 1.0 mul /z ED 1.0 mul /y ED
1 mul /x ED ConvertTo2D x2D y2D end   28.45274 mul exch 28.45274 mul
exch  } false /N@temp@pstNode 10 {InitPnode } /NodeScale {} def NewNode
end  end
 1584 1621 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.5 SLW 1 0 0  setrgbcolor  end
 
@endspecial 1584 1621 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 1584 1621 a 1584
1621 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(keep ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 1584 1621 a Fb(2)1619 1621 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 1619 1621 a 1584
1621 a
tx@Dict begin  PutEnd  end
 1584 1621 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 0 0.100000000000000000
3.0 0 -0.100000000000000000 3.0  tx@3DPlotDict begin   /RotX 0.  def
/RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec
0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0
def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 45.  def /Beta
30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def
/Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2
mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid
true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if
/eulerRotation false def RotSet (set ) eq currentdict /MnewTOold known
not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion def}
{RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion
def} {/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end  /Lineto
/lineto load def 1  setlinejoin false   NArray n 0 eq not { n 1 eq
{ 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 1 0 0  setrgbcolor
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
1584 1621 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 45.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0.200000000000000000 3.0 1.0 mul /z ED 1.0 mul /y ED
1 mul /x ED ConvertTo2D x2D y2D end   28.45274 mul exch 28.45274 mul
exch  } false /N@temp@pstNode 10 {InitPnode } /NodeScale {} def NewNode
end  end
 1584 1621 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.5 SLW 1 0 0  setrgbcolor  end
 
@endspecial
1584 1621 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 1584 1621 a 1584 1621 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(keep ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 1584 1621 a Fb(3)1619
1621 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 1619 1621 a 1584 1621 a
tx@Dict begin  PutEnd  end
 1584 1621 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 0 0.100000000000000000
4.0 0 -0.100000000000000000 4.0  tx@3DPlotDict begin   /RotX 0.  def
/RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec
0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0
def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 45.  def /Beta
30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def
/Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2
mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid
true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if
/eulerRotation false def RotSet (set ) eq currentdict /MnewTOold known
not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion def}
{RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion
def} {/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 28.45274
 mul } def /yUnit { 28.45274  mul } def convertStackTo2D end  /Lineto
/lineto load def 1  setlinejoin false   NArray n 0 eq not { n 1 eq
{ 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.5 SLW 1 0 0  setrgbcolor
 1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 1584 1621 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 45.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0.200000000000000000 4.0 1.0 mul /z ED 1.0 mul /y ED
1 mul /x ED ConvertTo2D x2D y2D end   28.45274 mul exch 28.45274 mul
exch  } false /N@temp@pstNode 10 {InitPnode } /NodeScale {} def NewNode
end  end
 1584 1621 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.5 SLW 1 0 0  setrgbcolor  end
 
@endspecial 1584 1621 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 1584 1621 a 1584
1621 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(keep ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 1584 1621 a Fb(4)1619 1621 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 1619 1621 a 1584
1621 a
tx@Dict begin  PutEnd  end
 1584 1621 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 0 0.100000000000000000
-1.0 0 -0.100000000000000000 -1.0  tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 45.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /SphericalCoor
false def /xUnit { 28.45274  mul } def /yUnit { 28.45274  mul } def
convertStackTo2D end  /Lineto /lineto load def 1  setlinejoin false
  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5
2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.5 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   1  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
1584 1621 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 45.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0.200000000000000000 -1.0 1.0 mul /z ED 1.0 mul /y
ED 1 mul /x ED ConvertTo2D x2D y2D end   28.45274 mul exch 28.45274
mul exch  } false /N@temp@pstNode 10 {InitPnode } /NodeScale {} def
NewNode end  end
 1584 1621 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.5 SLW 1 0 0  setrgbcolor  end
 
@endspecial
1584 1621 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 1584 1621 a 1584 1621 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(keep ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 1584 1621 a Fb(-1)1643
1621 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 1643 1621 a 1584 1621 a
tx@Dict begin  PutEnd  end
 1584 1621 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  tx@3DPlotDict begin   /RotX
0.  def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1. 
def /yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def
/dzUnit 1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 45.
 def /Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta
cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED end 0 0 0  /zM ED /yM ED /xM ED 0 4  0  /zA ED /yA ED
/xA ED 0 0 4   /zB ED /yB ED /xB ED /aStart 0 def /aEnd 360 def /da
aEnd aStart sub 49  div def tx@3DPlotDict begin  /vecA [xA yA zA] vector-length
def /vecB [xB yB zB] vector-length def end /xyz { tx@3DPlotDict begin
 /phi angle cvi 90 mod 0 eq { angle } { vecA angle tan mul vecB atan
angle 180 div .5 add floor 180 mul add } ifelse def xM xA phi cos mul
add xB phi sin mul add yM yA phi cos mul add yB phi sin mul add zM
zA phi cos mul add zB phi sin mul add saveCoor ConvertTo2D x2D 28.45274
mul y2D 28.45274 mul end } def /angle aStart def  mark /n 2 def 49
{ xyz n 2 roll /n n 2 add def /angle angle da add def } repeat /angle
aEnd def xyz n 2 roll   1. 0.1 0.  /c ED /b ED /a ED false OpenCurve
 gsave 0.8 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinecap
[  5.0  3.0  0.0  0.0 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  tx@3DPlotDict begin   /RotX 0.  def /RotY
0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.
 def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def
/RotSequence (xyz ) def /RotSet (set ) def /Alpha 45.  def /Beta 30.
 def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2
Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def
/Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true
def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation
false def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED end 4 20 sin mul 0 0
 /zM ED /yM ED /xM ED 0 4 20 cos mul 0  /zA ED /yA ED /xA ED 0 0 4
20 cos mul  /zB ED /yB ED /xB ED /aStart 0 def /aEnd 360 def /da aEnd
aStart sub 49  div def tx@3DPlotDict begin  /vecA [xA yA zA] vector-length
def /vecB [xB yB zB] vector-length def end /xyz { tx@3DPlotDict begin
 /phi angle cvi 90 mod 0 eq { angle } { vecA angle tan mul vecB atan
angle 180 div .5 add floor 180 mul add } ifelse def xM xA phi cos mul
add xB phi sin mul add yM yA phi cos mul add yB phi sin mul add zM
zA phi cos mul add zB phi sin mul add saveCoor ConvertTo2D x2D 28.45274
mul y2D 28.45274 mul end } def /angle aStart def  mark /n 2 def 49
{ xyz n 2 roll /n n 2 add def /angle angle da add def } repeat /angle
aEnd def xyz n 2 roll   1. 0.1 0.  /c ED /b ED /a ED false OpenCurve
 gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinecap [  5.0
 3.0  0.0  0.0 ] 0 0 add  DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  tx@3DPlotDict begin   /RotX 0.  def /RotY
0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.
 def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def
/RotSequence (xyz ) def /RotSet (set ) def /Alpha 45.  def /Beta 30.
 def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2
Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def
/Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true
def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation
false def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED end 4 50 sin mul 0 0
 /zM ED /yM ED /xM ED 0 4 50 cos mul 0  /zA ED /yA ED /xA ED 0 0 4
50 cos mul  /zB ED /yB ED /xB ED /aStart 0 def /aEnd 360 def /da aEnd
aStart sub 49  div def tx@3DPlotDict begin  /vecA [xA yA zA] vector-length
def /vecB [xB yB zB] vector-length def end /xyz { tx@3DPlotDict begin
 /phi angle cvi 90 mod 0 eq { angle } { vecA angle tan mul vecB atan
angle 180 div .5 add floor 180 mul add } ifelse def xM xA phi cos mul
add xB phi sin mul add yM yA phi cos mul add yB phi sin mul add zM
zA phi cos mul add zB phi sin mul add saveCoor ConvertTo2D x2D 28.45274
mul y2D 28.45274 mul end } def /angle aStart def  mark /n 2 def 49
{ xyz n 2 roll /n n 2 add def /angle angle da add def } repeat /angle
aEnd def xyz n 2 roll   1. 0.1 0.  /c ED /b ED /a ED false OpenCurve
 gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinecap [  5.0
 3.0  0.0  0.0 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  tx@3DPlotDict begin   /RotX 0.  def /RotY
0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.
 def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def
/RotSequence (xyz ) def /RotSet (set ) def /Alpha 45.  def /Beta 30.
 def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2
Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def
/Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true
def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation
false def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED end 0 0 0  tx@3DPlotDict
begin  ConvertToCartesian end /zM tx@3DPlotDict begin  z end def /yM
tx@3DPlotDict begin  y end def /xM tx@3DPlotDict begin  x end def 4
 90 20   tx@3DPlotDict begin  ConvertToCartesian end /zA tx@3DPlotDict
begin  z end def /yA tx@3DPlotDict begin  y end def /xA tx@3DPlotDict
begin  x end def 4  0 0  tx@3DPlotDict begin  ConvertToCartesian end
/zB tx@3DPlotDict begin  z end def /yB tx@3DPlotDict begin  y end def
/xB tx@3DPlotDict begin  x end def /aStart 0 def /aEnd 360 def /da
aEnd aStart sub 49  div def tx@3DPlotDict begin  /vecA [xA yA zA] vector-length
def /vecB [xB yB zB] vector-length def end /xyz { tx@3DPlotDict begin
 /phi angle cvi 90 mod 0 eq { angle } { vecA angle tan mul vecB atan
angle 180 div .5 add floor 180 mul add } ifelse def xM xA phi cos mul
add xB phi sin mul add yM yA phi cos mul add yB phi sin mul add zM
zA phi cos mul add zB phi sin mul add saveCoor ConvertTo2D x2D 28.45274
mul y2D 28.45274 mul end } def /angle aStart def  mark /n 2 def 49
{ xyz n 2 roll /n n 2 add def /angle angle da add def } repeat /angle
aEnd def xyz n 2 roll   1. 0.1 0.  /c ED /b ED /a ED false OpenCurve
 gsave 0.8 SLW 0  setgray  1. .setopacityalpha   3.0 0 0 add  DotLine
 grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  tx@3DPlotDict begin   /RotX 0.  def /RotY
0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.
 def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def
/RotSequence (xyz ) def /RotSet (set ) def /Alpha 45.  def /Beta 30.
 def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2
Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def
/Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true
def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation
false def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED end 0 0 0  tx@3DPlotDict
begin  ConvertToCartesian end /zM tx@3DPlotDict begin  z end def /yM
tx@3DPlotDict begin  y end def /xM tx@3DPlotDict begin  x end def 4
 90 20   tx@3DPlotDict begin  ConvertToCartesian end /zA tx@3DPlotDict
begin  z end def /yA tx@3DPlotDict begin  y end def /xA tx@3DPlotDict
begin  x end def 4  0 0  tx@3DPlotDict begin  ConvertToCartesian end
/zB tx@3DPlotDict begin  z end def /yB tx@3DPlotDict begin  y end def
/xB tx@3DPlotDict begin  x end def /aStart -90 def /aEnd 90 def /da
aEnd aStart sub 49  div def tx@3DPlotDict begin  /vecA [xA yA zA] vector-length
def /vecB [xB yB zB] vector-length def end /xyz { tx@3DPlotDict begin
 /phi angle cvi 90 mod 0 eq { angle } { vecA angle tan mul vecB atan
angle 180 div .5 add floor 180 mul add } ifelse def xM xA phi cos mul
add xB phi sin mul add yM yA phi cos mul add yB phi sin mul add zM
zA phi cos mul add zB phi sin mul add saveCoor ConvertTo2D x2D 28.45274
mul y2D 28.45274 mul end } def /angle aStart def  mark /n 2 def 49
{ xyz n 2 roll /n n 2 add def /angle angle da add def } repeat /angle
aEnd def xyz n 2 roll   1. 0.1 0.  /c ED /b ED /a ED false OpenCurve
 gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinecap [  5.0
 3.0  0.0  0.0 ] 0 0 add  DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  tx@3DPlotDict begin   /RotX 0.  def /RotY
0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.
 def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def
/RotSequence (xyz ) def /RotSet (set ) def /Alpha 45.  def /Beta 30.
 def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2
Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def
/Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true
def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation
false def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED end 0 0 0  tx@3DPlotDict
begin  ConvertToCartesian end /zM tx@3DPlotDict begin  z end def /yM
tx@3DPlotDict begin  y end def /xM tx@3DPlotDict begin  x end def 4
 90 50   tx@3DPlotDict begin  ConvertToCartesian end /zA tx@3DPlotDict
begin  z end def /yA tx@3DPlotDict begin  y end def /xA tx@3DPlotDict
begin  x end def 4  0 0  tx@3DPlotDict begin  ConvertToCartesian end
/zB tx@3DPlotDict begin  z end def /yB tx@3DPlotDict begin  y end def
/xB tx@3DPlotDict begin  x end def /aStart 0 def /aEnd 360 def /da
aEnd aStart sub 49  div def tx@3DPlotDict begin  /vecA [xA yA zA] vector-length
def /vecB [xB yB zB] vector-length def end /xyz { tx@3DPlotDict begin
 /phi angle cvi 90 mod 0 eq { angle } { vecA angle tan mul vecB atan
angle 180 div .5 add floor 180 mul add } ifelse def xM xA phi cos mul
add xB phi sin mul add yM yA phi cos mul add yB phi sin mul add zM
zA phi cos mul add zB phi sin mul add saveCoor ConvertTo2D x2D 28.45274
mul y2D 28.45274 mul end } def /angle aStart def  mark /n 2 def 49
{ xyz n 2 roll /n n 2 add def /angle angle da add def } repeat /angle
aEnd def xyz n 2 roll   1. 0.1 0.  /c ED /b ED /a ED false OpenCurve
 gsave 0.8 SLW 0  setgray  1. .setopacityalpha   3.0 0 0 add  DotLine
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  tx@3DPlotDict begin   /RotX 0.  def /RotY
0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.
 def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def
/RotSequence (xyz ) def /RotSet (set ) def /Alpha 45.  def /Beta 30.
 def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2
Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def
/Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true
def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation
false def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED end 0 0 0  tx@3DPlotDict
begin  ConvertToCartesian end /zM tx@3DPlotDict begin  z end def /yM
tx@3DPlotDict begin  y end def /xM tx@3DPlotDict begin  x end def 4
 90 50   tx@3DPlotDict begin  ConvertToCartesian end /zA tx@3DPlotDict
begin  z end def /yA tx@3DPlotDict begin  y end def /xA tx@3DPlotDict
begin  x end def 4  0 0  tx@3DPlotDict begin  ConvertToCartesian end
/zB tx@3DPlotDict begin  z end def /yB tx@3DPlotDict begin  y end def
/xB tx@3DPlotDict begin  x end def /aStart -90 def /aEnd 90 def /da
aEnd aStart sub 49  div def tx@3DPlotDict begin  /vecA [xA yA zA] vector-length
def /vecB [xB yB zB] vector-length def end /xyz { tx@3DPlotDict begin
 /phi angle cvi 90 mod 0 eq { angle } { vecA angle tan mul vecB atan
angle 180 div .5 add floor 180 mul add } ifelse def xM xA phi cos mul
add xB phi sin mul add yM yA phi cos mul add yB phi sin mul add zM
zA phi cos mul add zB phi sin mul add saveCoor ConvertTo2D x2D 28.45274
mul y2D 28.45274 mul end } def /angle aStart def  mark /n 2 def 49
{ xyz n 2 roll /n n 2 add def /angle angle da add def } repeat /angle
aEnd def xyz n 2 roll   1. 0.1 0.  /c ED /b ED /a ED false OpenCurve
 gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinecap [  5.0
 3.0  0.0  0.0 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray   0.8 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
/ArrowInside { } def  tx@3DPlotDict begin   /RotX 0.  def /RotY 0.
 def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0. 
def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def
/RotSequence (xyz ) def /RotSet (set ) def /Alpha 45.  def /Beta 30.
 def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2
Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def
/Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true
def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation
false def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 0  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED end 0 0 0  tx@3DPlotDict
begin  ConvertToCartesian end /zM tx@3DPlotDict begin  z end def /yM
tx@3DPlotDict begin  y end def /xM tx@3DPlotDict begin  x end def 4
 90 50   tx@3DPlotDict begin  ConvertToCartesian end /zA tx@3DPlotDict
begin  z end def /yA tx@3DPlotDict begin  y end def /xA tx@3DPlotDict
begin  x end def 4  0 0  tx@3DPlotDict begin  ConvertToCartesian end
/zB tx@3DPlotDict begin  z end def /yB tx@3DPlotDict begin  y end def
/xB tx@3DPlotDict begin  x end def /aStart 20  def /aEnd 50  def /da
aEnd aStart sub 49  div def tx@3DPlotDict begin  /vecA [xA yA zA] vector-length
def /vecB [xB yB zB] vector-length def end /xyz { tx@3DPlotDict begin
 /phi angle cvi 90 mod 0 eq { angle } { vecA angle tan mul vecB atan
angle 180 div .5 add floor 180 mul add } ifelse def xM xA phi cos mul
add xB phi sin mul add yM yA phi cos mul add yB phi sin mul add zM
zA phi cos mul add zB phi sin mul add saveCoor ConvertTo2D x2D 28.45274
mul y2D 28.45274 mul end } def /angle aStart def  mark /n 2 def 49
{ xyz n 2 roll /n n 2 add def /angle angle da add def } repeat /angle
aEnd def xyz n 2 roll   /currentpoint load stopped pop 1. 0.1 0.  /c
ED /b ED /a ED false OpenCurve   0.8 SLW 0  setgray  /ArrowA { /lineto
load stopped { moveto } if } def /ArrowB { } def /ArrowInside { } def
 tx@3DPlotDict begin   /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(set ) def /Alpha 45.  def /Beta 30.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED end 4 50 sin mul 0 0  /zM ED /yM ED /xM ED 0 4 50 cos
mul 0  /zA ED /yA ED /xA ED 0 0 4 50 cos mul  /zB ED /yB ED /xB ED
/aStart 50  def /aEnd 20  def /da aEnd aStart sub 49  div def tx@3DPlotDict
begin  /vecA [xA yA zA] vector-length def /vecB [xB yB zB] vector-length
def end /xyz { tx@3DPlotDict begin  /phi angle cvi 90 mod 0 eq { angle
} { vecA angle tan mul vecB atan angle 180 div .5 add floor 180 mul
add } ifelse def xM xA phi cos mul add xB phi sin mul add yM yA phi
cos mul add yB phi sin mul add zM zA phi cos mul add zB phi sin mul
add saveCoor ConvertTo2D x2D 28.45274 mul y2D 28.45274 mul end } def
/angle aStart def  mark /n 2 def 49 { xyz n 2 roll /n n 2 add def /angle
angle da add def } repeat /angle aEnd def xyz n 2 roll   /currentpoint
load stopped pop 1. 0.1 0.  /c ED /b ED /a ED false OpenCurve   0.8
SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if } def
/ArrowB { } def /ArrowInside { } def  tx@3DPlotDict begin   /RotX 0.
 def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 45.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED end 0 0 0  tx@3DPlotDict begin  ConvertToCartesian end
/zM tx@3DPlotDict begin  z end def /yM tx@3DPlotDict begin  y end def
/xM tx@3DPlotDict begin  x end def 4  90 20   tx@3DPlotDict begin 
ConvertToCartesian end /zA tx@3DPlotDict begin  z end def /yA tx@3DPlotDict
begin  y end def /xA tx@3DPlotDict begin  x end def 4  0 0  tx@3DPlotDict
begin  ConvertToCartesian end /zB tx@3DPlotDict begin  z end def /yB
tx@3DPlotDict begin  y end def /xB tx@3DPlotDict begin  x end def /aStart
50  def /aEnd 20  def /da aEnd aStart sub 49  div def tx@3DPlotDict
begin  /vecA [xA yA zA] vector-length def /vecB [xB yB zB] vector-length
def end /xyz { tx@3DPlotDict begin  /phi angle cvi 90 mod 0 eq { angle
} { vecA angle tan mul vecB atan angle 180 div .5 add floor 180 mul
add } ifelse def xM xA phi cos mul add xB phi sin mul add yM yA phi
cos mul add yB phi sin mul add zM zA phi cos mul add zB phi sin mul
add saveCoor ConvertTo2D x2D 28.45274 mul y2D 28.45274 mul end } def
/angle aStart def  mark /n 2 def 49 { xyz n 2 roll /n n 2 add def /angle
angle da add def } repeat /angle aEnd def xyz n 2 roll   /currentpoint
load stopped pop 1. 0.1 0.  /c ED /b ED /a ED false OpenCurve   0.8
SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if } def
/ArrowB { } def /ArrowInside { } def  tx@3DPlotDict begin   /RotX 0.
 def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 45.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 0  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED end 4 20 sin mul 0 0  /zM ED /yM ED /xM ED 0 4 20 cos
mul 0  /zA ED /yA ED /xA ED 0 0 4 20 cos mul  /zB ED /yB ED /xB ED
/aStart 20  def /aEnd 50  def /da aEnd aStart sub 49  div def tx@3DPlotDict
begin  /vecA [xA yA zA] vector-length def /vecB [xB yB zB] vector-length
def end /xyz { tx@3DPlotDict begin  /phi angle cvi 90 mod 0 eq { angle
} { vecA angle tan mul vecB atan angle 180 div .5 add floor 180 mul
add } ifelse def xM xA phi cos mul add xB phi sin mul add yM yA phi
cos mul add yB phi sin mul add zM zA phi cos mul add zB phi sin mul
add saveCoor ConvertTo2D x2D 28.45274 mul y2D 28.45274 mul end } def
/angle aStart def  mark /n 2 def 49 { xyz n 2 roll /n n 2 add def /angle
angle da add def } repeat /angle aEnd def xyz n 2 roll   /currentpoint
load stopped pop 1. 0.1 0.  /c ED /b ED /a ED false OpenCurve  gsave
0 0 1  setrgbcolor  1. .setopacityalpha  fill  grestore gsave 0.8 SLW
0  setgray  1. .setopacityalpha   0  setlinecap [  5.0  3.0  0.0  0.0
] 2  DashLine  grestore end
 
@endspecial
1437 4062 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 90.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   12.80365 mul exch 12.80365 mul exch  } false /N@xMin
10 {InitPnode } /NodeScale {} def NewNode end  end
 1437 4062 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.75 SLW 0 0 0  setrgbcolor  end
 
@endspecial
1437 4062 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 90.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 11 0 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   12.80365 mul exch 12.80365 mul exch  } false /N@xMax
10 {InitPnode } /NodeScale {} def NewNode end  end
 1437 4062 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.75 SLW 0 0 0  setrgbcolor  end
 
@endspecial
1437 4062 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 90.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -1 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   12.80365 mul exch 12.80365 mul exch  } false /N@yMin
10 {InitPnode } /NodeScale {} def NewNode end  end
 1437 4062 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.75 SLW 0 0 0  setrgbcolor  end
 
@endspecial
1437 4062 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 90.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 13 0 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   12.80365 mul exch 12.80365 mul exch  } false /N@yMax
10 {InitPnode } /NodeScale {} def NewNode end  end
 1437 4062 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.75 SLW 0 0 0  setrgbcolor  end
 
@endspecial
1437 4062 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 90.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 -1 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   12.80365 mul exch 12.80365 mul exch  } false /N@zMin
10 {InitPnode } /NodeScale {} def NewNode end  end
 1437 4062 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.75 SLW 0 0 0  setrgbcolor  end
 
@endspecial
1437 4062 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 90.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 0 11 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D
x2D y2D end   12.80365 mul exch 12.80365 mul exch  } false /N@zMax
10 {InitPnode } /NodeScale {} def NewNode end  end
 1437 4062 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.75 SLW 0 0 0  setrgbcolor  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.75
SLW 0 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax load GetCenter
} { 0 0 } ifelse end tx@NodeDict begin tx@NodeDict /N@xMin known {
/N@xMin load GetCenter } { 0 0 } ifelse end   /Lineto /lineto load
def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def
} if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.75 SLW 0 0 0  setrgbcolor  1.
.setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.75
SLW 0 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax load GetCenter
} { 0 0 } ifelse end tx@NodeDict begin tx@NodeDict /N@yMin known {
/N@yMin load GetCenter } { 0 0 } ifelse end   /Lineto /lineto load
def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def
} if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.75 SLW 0 0 0  setrgbcolor  1.
.setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.75
SLW 0 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax load GetCenter
} { 0 0 } ifelse end tx@NodeDict begin tx@NodeDict /N@zMin known {
/N@zMin load GetCenter } { 0 0 } ifelse end   /Lineto /lineto load
def 1  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def
} if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.75 SLW 0 0 0  setrgbcolor  1.
.setopacityalpha   1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
1437 4062 a
tx@Dict begin  gsave STV CP T /ps@refangle 180.  def grestore  end
 1437 4062 a 1437 4062 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@xMax known { /N@xMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1437 4062 a 1437
4062 a
tx@Dict begin { 5.0 10.2014 4.30554 1.49998 180.  Uput UUput } PutCoor
PutBegin  end
 1437 4062 a 1395 4074 a Fc(x)1442 4086 y Fa(1)1437
4062 y
tx@Dict begin  PutEnd  end
 1437 4062 a 1437 4062 a
tx@Dict begin  PutEnd  end
 1437 4062 a 1437 4062
a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 1437 4062 a 1437 4062 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@yMax known { /N@yMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1437 4062 a 1437 4062 a
tx@Dict begin { 5.0 10.2014 4.30554 1.49998 0.  Uput UUput } PutCoor
PutBegin  end
 1437
4062 a 1395 4074 a Fc(x)1442 4086 y Fa(2)1437 4062 y
tx@Dict begin  PutEnd  end

1437 4062 a 1437 4062 a
tx@Dict begin  PutEnd  end
 1437 4062 a 1437 4062 a
tx@Dict begin  gsave STV CP T /ps@refangle 90.  def grestore  end
 1437
4062 a 1437 4062 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@zMax known { /N@zMax
load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin  end
 1437 4062 a 1437 4062 a
tx@Dict begin { 5.0 10.2014 4.30554 1.49998 90.  Uput UUput } PutCoor
PutBegin  end
 1437 4062
a 1395 4074 a Fc(x)1442 4086 y Fa(3)1437 4062 y
tx@Dict begin  PutEnd  end
 1437
4062 a 1437 4062 a
tx@Dict begin  PutEnd  end
 1437 4062 a 1437 4062 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 90.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 1.0 -0.800000000000000000 0 1.0 mul /z ED 1.0 mul /y
ED 1 mul /x ED ConvertTo2D x2D y2D end   12.80365 mul exch 12.80365
mul exch  } false /N@temp@pstNode 10 {InitPnode } /NodeScale {} def
NewNode end  end
 1437 4062
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.75 SLW 0 0 0  setrgbcolor  end
 
@endspecial 1437 4062 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end

1437 4062 a 1437 4062 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(keep ) def /Alpha 90.  def /Beta 30.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 1437 4062 a Fb(1)1472 4062 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end

1472 4062 a 1437 4062 a
tx@Dict begin  PutEnd  end
 1437 4062 a 1437 4062 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 90.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 2.0 -0.800000000000000000 0 1.0 mul /z ED 1.0 mul /y
ED 1 mul /x ED ConvertTo2D x2D y2D end   12.80365 mul exch 12.80365
mul exch  } false /N@temp@pstNode 10 {InitPnode } /NodeScale {} def
NewNode end  end
 1437
4062 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.75 SLW 0 0 0  setrgbcolor  end
 
@endspecial 1437 4062
a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 1437 4062 a 1437 4062 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(keep ) def /Alpha 90.  def /Beta 30.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 1437 4062 a Fb(2)1472 4062
y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 1472 4062 a 1437 4062 a
tx@Dict begin  PutEnd  end
 1437 4062 a 1437 4062 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 90.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 3.0 -0.800000000000000000 0 1.0 mul /z ED 1.0 mul /y
ED 1 mul /x ED ConvertTo2D x2D y2D end   12.80365 mul exch 12.80365
mul exch  } false /N@temp@pstNode 10 {InitPnode } /NodeScale {} def
NewNode end  end
 1437
4062 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.75 SLW 0 0 0  setrgbcolor  end
 
@endspecial 1437 4062
a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 1437 4062 a 1437 4062 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(keep ) def /Alpha 90.  def /Beta 30.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 1437 4062 a Fb(3)1472 4062
y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 1472 4062 a 1437 4062 a
tx@Dict begin  PutEnd  end
 1437 4062 a 1437 4062 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 90.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 4.0 -0.800000000000000000 0 1.0 mul /z ED 1.0 mul /y
ED 1 mul /x ED ConvertTo2D x2D y2D end   12.80365 mul exch 12.80365
mul exch  } false /N@temp@pstNode 10 {InitPnode } /NodeScale {} def
NewNode end  end
 1437
4062 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.75 SLW 0 0 0  setrgbcolor  end
 
@endspecial 1437 4062
a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 1437 4062 a 1437 4062 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(keep ) def /Alpha 90.  def /Beta 30.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 1437 4062 a Fb(4)1472 4062
y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 1472 4062 a 1437 4062 a
tx@Dict begin  PutEnd  end
 1437 4062 a 1437 4062 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 90.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 5.0 -0.800000000000000000 0 1.0 mul /z ED 1.0 mul /y
ED 1 mul /x ED ConvertTo2D x2D y2D end   12.80365 mul exch 12.80365
mul exch  } false /N@temp@pstNode 10 {InitPnode } /NodeScale {} def
NewNode end  end
 1437
4062 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.75 SLW 0 0 0  setrgbcolor  end
 
@endspecial 1437 4062
a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 1437 4062 a 1437 4062 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(keep ) def /Alpha 90.  def /Beta 30.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 1437 4062 a Fb(5)1472 4062
y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 1472 4062 a 1437 4062 a
tx@Dict begin  PutEnd  end
 1437 4062 a 1437 4062 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 90.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 6.0 -0.800000000000000000 0 1.0 mul /z ED 1.0 mul /y
ED 1 mul /x ED ConvertTo2D x2D y2D end   12.80365 mul exch 12.80365
mul exch  } false /N@temp@pstNode 10 {InitPnode } /NodeScale {} def
NewNode end  end
 1437
4062 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.75 SLW 0 0 0  setrgbcolor  end
 
@endspecial 1437 4062
a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 1437 4062 a 1437 4062 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(keep ) def /Alpha 90.  def /Beta 30.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 1437 4062 a Fb(6)1472 4062
y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 1472 4062 a 1437 4062 a
tx@Dict begin  PutEnd  end
 1437 4062 a 1437 4062 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 90.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 7.0 -0.800000000000000000 0 1.0 mul /z ED 1.0 mul /y
ED 1 mul /x ED ConvertTo2D x2D y2D end   12.80365 mul exch 12.80365
mul exch  } false /N@temp@pstNode 10 {InitPnode } /NodeScale {} def
NewNode end  end
 1437
4062 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.75 SLW 0 0 0  setrgbcolor  end
 
@endspecial 1437 4062
a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 1437 4062 a 1437 4062 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(keep ) def /Alpha 90.  def /Beta 30.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 1437 4062 a Fb(7)1472 4062
y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 1472 4062 a 1437 4062 a
tx@Dict begin  PutEnd  end
 1437 4062 a 1437 4062 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 90.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 8.0 -0.800000000000000000 0 1.0 mul /z ED 1.0 mul /y
ED 1 mul /x ED ConvertTo2D x2D y2D end   12.80365 mul exch 12.80365
mul exch  } false /N@temp@pstNode 10 {InitPnode } /NodeScale {} def
NewNode end  end
 1437
4062 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.75 SLW 0 0 0  setrgbcolor  end
 
@endspecial 1437 4062
a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 1437 4062 a 1437 4062 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(keep ) def /Alpha 90.  def /Beta 30.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 1437 4062 a Fb(8)1472 4062
y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 1472 4062 a 1437 4062 a
tx@Dict begin  PutEnd  end
 1437 4062 a 1437 4062 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 90.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 9.0 -0.800000000000000000 0 1.0 mul /z ED 1.0 mul /y
ED 1 mul /x ED ConvertTo2D x2D y2D end   12.80365 mul exch 12.80365
mul exch  } false /N@temp@pstNode 10 {InitPnode } /NodeScale {} def
NewNode end  end
 1437
4062 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.75 SLW 0 0 0  setrgbcolor  end
 
@endspecial 1437 4062
a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 1437 4062 a 1437 4062 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(keep ) def /Alpha 90.  def /Beta 30.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 1437 4062 a Fb(9)1472 4062
y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 1472 4062 a 1437 4062 a
tx@Dict begin  PutEnd  end
 1437 4062 a 1437 4062 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 90.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 10.0 -0.800000000000000000 0 1.0 mul /z ED 1.0 mul /y
ED 1 mul /x ED ConvertTo2D x2D y2D end   12.80365 mul exch 12.80365
mul exch  } false /N@temp@pstNode 10 {InitPnode } /NodeScale {} def
NewNode end  end
 1437
4062 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.75 SLW 0 0 0  setrgbcolor  end
 
@endspecial 1437 4062
a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 1437 4062 a 1437 4062 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(keep ) def /Alpha 90.  def /Beta 30.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 1437 4062 a Fb(10)1507 4062
y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 1507 4062 a 1437 4062 a
tx@Dict begin  PutEnd  end
 1437 4062 a 1437 4062 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 90.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -1.0 -0.800000000000000000 0 1.0 mul /z ED 1.0 mul /y
ED 1 mul /x ED ConvertTo2D x2D y2D end   12.80365 mul exch 12.80365
mul exch  } false /N@temp@pstNode 10 {InitPnode } /NodeScale {} def
NewNode end  end
 1437
4062 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.75 SLW 0 0 0  setrgbcolor  end
 
@endspecial 1437 4062
a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 1437 4062 a 1437 4062 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(keep ) def /Alpha 90.  def /Beta 30.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 1437 4062 a Fb(-1)1495 4062
y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 1495 4062 a 1437 4062 a
tx@Dict begin  PutEnd  end
 1437 4062 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.75 SLW 0 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 0 1.0 0.200000000000000000
0 1.0 -0.200000000000000000  tx@3DPlotDict begin   /RotX 0.  def /RotY
0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.
 def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def
/RotSequence (xyz ) def /RotSet (keep ) def /Alpha 90.  def /Beta 30.
 def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2
Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def
/Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true
def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation
false def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 2  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 12.80365
 mul } def /yUnit { 12.80365  mul } def convertStackTo2D end  /Lineto
/lineto load def 1  setlinejoin false   NArray n 0 eq not { n 1 eq
{ 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.75 SLW 0 0 0 
setrgbcolor  1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial 1437 4062 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 90.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -0.500000000000000000 1.0 0 1.0 mul /z ED 1.0 mul /y
ED 1 mul /x ED ConvertTo2D x2D y2D end   12.80365 mul exch 12.80365
mul exch  } false /N@temp@pstNode 10 {InitPnode } /NodeScale {} def
NewNode end  end
 1437 4062 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.75 SLW 0 0 0  setrgbcolor  end


@endspecial 1437 4062 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 1437 4062 a 1437 4062 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(keep ) def /Alpha 90.  def /Beta 30.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 1437
4062 a Fb(1)1472 4062 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 1472 4062 a 1437 4062 a
tx@Dict begin  PutEnd  end
 1437
4062 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.75 SLW 0 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 0 2.0 0.200000000000000000
0 2.0 -0.200000000000000000  tx@3DPlotDict begin   /RotX 0.  def /RotY
0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.
 def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def
/RotSequence (xyz ) def /RotSet (keep ) def /Alpha 90.  def /Beta 30.
 def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2
Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def
/Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true
def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation
false def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 2  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 12.80365
 mul } def /yUnit { 12.80365  mul } def convertStackTo2D end  /Lineto
/lineto load def 1  setlinejoin false   NArray n 0 eq not { n 1 eq
{ 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.75 SLW 0 0 0 
setrgbcolor  1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1437 4062
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 90.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -0.500000000000000000 2.0 0 1.0 mul /z ED 1.0 mul /y
ED 1 mul /x ED ConvertTo2D x2D y2D end   12.80365 mul exch 12.80365
mul exch  } false /N@temp@pstNode 10 {InitPnode } /NodeScale {} def
NewNode end  end
 1437 4062 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.75 SLW 0 0 0  setrgbcolor  end
 
@endspecial
1437 4062 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 1437 4062 a 1437 4062 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(keep ) def /Alpha 90.  def /Beta 30.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 1437 4062 a Fb(2)1472
4062 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 1472 4062 a 1437 4062 a
tx@Dict begin  PutEnd  end
 1437 4062 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.75 SLW 0 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 0 3.0 0.200000000000000000
0 3.0 -0.200000000000000000  tx@3DPlotDict begin   /RotX 0.  def /RotY
0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.
 def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def
/RotSequence (xyz ) def /RotSet (keep ) def /Alpha 90.  def /Beta 30.
 def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2
Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def
/Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true
def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation
false def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 2  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 12.80365
 mul } def /yUnit { 12.80365  mul } def convertStackTo2D end  /Lineto
/lineto load def 1  setlinejoin false   NArray n 0 eq not { n 1 eq
{ 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.75 SLW 0 0 0 
setrgbcolor  1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1437 4062 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 90.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -0.500000000000000000 3.0 0 1.0 mul /z ED 1.0 mul /y
ED 1 mul /x ED ConvertTo2D x2D y2D end   12.80365 mul exch 12.80365
mul exch  } false /N@temp@pstNode 10 {InitPnode } /NodeScale {} def
NewNode end  end
 1437 4062 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.75 SLW 0 0 0  setrgbcolor  end
 
@endspecial 1437 4062 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 1437 4062 a 1437
4062 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(keep ) def /Alpha 90.  def /Beta 30.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 1437 4062 a Fb(3)1472 4062 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 1472 4062 a 1437
4062 a
tx@Dict begin  PutEnd  end
 1437 4062 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.75 SLW 0 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 0 4.0 0.200000000000000000
0 4.0 -0.200000000000000000  tx@3DPlotDict begin   /RotX 0.  def /RotY
0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.
 def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def
/RotSequence (xyz ) def /RotSet (keep ) def /Alpha 90.  def /Beta 30.
 def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2
Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def
/Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true
def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation
false def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 2  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 12.80365
 mul } def /yUnit { 12.80365  mul } def convertStackTo2D end  /Lineto
/lineto load def 1  setlinejoin false   NArray n 0 eq not { n 1 eq
{ 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.75 SLW 0 0 0 
setrgbcolor  1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial
1437 4062 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 90.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -0.500000000000000000 4.0 0 1.0 mul /z ED 1.0 mul /y
ED 1 mul /x ED ConvertTo2D x2D y2D end   12.80365 mul exch 12.80365
mul exch  } false /N@temp@pstNode 10 {InitPnode } /NodeScale {} def
NewNode end  end
 1437 4062 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.75 SLW 0 0 0  setrgbcolor  end
 
@endspecial
1437 4062 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 1437 4062 a 1437 4062 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(keep ) def /Alpha 90.  def /Beta 30.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 1437 4062 a Fb(4)1472
4062 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 1472 4062 a 1437 4062 a
tx@Dict begin  PutEnd  end
 1437 4062 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.75 SLW 0 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 0 5.0 0.200000000000000000
0 5.0 -0.200000000000000000  tx@3DPlotDict begin   /RotX 0.  def /RotY
0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.
 def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def
/RotSequence (xyz ) def /RotSet (keep ) def /Alpha 90.  def /Beta 30.
 def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2
Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def
/Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true
def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation
false def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 2  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 12.80365
 mul } def /yUnit { 12.80365  mul } def convertStackTo2D end  /Lineto
/lineto load def 1  setlinejoin false   NArray n 0 eq not { n 1 eq
{ 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.75 SLW 0 0 0 
setrgbcolor  1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1437 4062 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 90.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -0.500000000000000000 5.0 0 1.0 mul /z ED 1.0 mul /y
ED 1 mul /x ED ConvertTo2D x2D y2D end   12.80365 mul exch 12.80365
mul exch  } false /N@temp@pstNode 10 {InitPnode } /NodeScale {} def
NewNode end  end
 1437 4062 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.75 SLW 0 0 0  setrgbcolor  end
 
@endspecial 1437 4062 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 1437 4062 a 1437
4062 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(keep ) def /Alpha 90.  def /Beta 30.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 1437 4062 a Fb(5)1472 4062 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 1472 4062 a 1437
4062 a
tx@Dict begin  PutEnd  end
 1437 4062 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.75 SLW 0 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 0 6.0 0.200000000000000000
0 6.0 -0.200000000000000000  tx@3DPlotDict begin   /RotX 0.  def /RotY
0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.
 def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def
/RotSequence (xyz ) def /RotSet (keep ) def /Alpha 90.  def /Beta 30.
 def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2
Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def
/Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true
def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation
false def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 2  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 12.80365
 mul } def /yUnit { 12.80365  mul } def convertStackTo2D end  /Lineto
/lineto load def 1  setlinejoin false   NArray n 0 eq not { n 1 eq
{ 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.75 SLW 0 0 0 
setrgbcolor  1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial
1437 4062 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 90.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -0.500000000000000000 6.0 0 1.0 mul /z ED 1.0 mul /y
ED 1 mul /x ED ConvertTo2D x2D y2D end   12.80365 mul exch 12.80365
mul exch  } false /N@temp@pstNode 10 {InitPnode } /NodeScale {} def
NewNode end  end
 1437 4062 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.75 SLW 0 0 0  setrgbcolor  end
 
@endspecial
1437 4062 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 1437 4062 a 1437 4062 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(keep ) def /Alpha 90.  def /Beta 30.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 1437 4062 a Fb(6)1472
4062 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 1472 4062 a 1437 4062 a
tx@Dict begin  PutEnd  end
 1437 4062 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.75 SLW 0 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 0 7.0 0.200000000000000000
0 7.0 -0.200000000000000000  tx@3DPlotDict begin   /RotX 0.  def /RotY
0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.
 def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def
/RotSequence (xyz ) def /RotSet (keep ) def /Alpha 90.  def /Beta 30.
 def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2
Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def
/Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true
def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation
false def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 2  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 12.80365
 mul } def /yUnit { 12.80365  mul } def convertStackTo2D end  /Lineto
/lineto load def 1  setlinejoin false   NArray n 0 eq not { n 1 eq
{ 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.75 SLW 0 0 0 
setrgbcolor  1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1437 4062 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 90.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -0.500000000000000000 7.0 0 1.0 mul /z ED 1.0 mul /y
ED 1 mul /x ED ConvertTo2D x2D y2D end   12.80365 mul exch 12.80365
mul exch  } false /N@temp@pstNode 10 {InitPnode } /NodeScale {} def
NewNode end  end
 1437 4062 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.75 SLW 0 0 0  setrgbcolor  end
 
@endspecial 1437 4062 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 1437 4062 a 1437
4062 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(keep ) def /Alpha 90.  def /Beta 30.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 1437 4062 a Fb(7)1472 4062 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 1472 4062 a 1437
4062 a
tx@Dict begin  PutEnd  end
 1437 4062 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.75 SLW 0 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 0 8.0 0.200000000000000000
0 8.0 -0.200000000000000000  tx@3DPlotDict begin   /RotX 0.  def /RotY
0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.
 def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def
/RotSequence (xyz ) def /RotSet (keep ) def /Alpha 90.  def /Beta 30.
 def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2
Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def
/Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true
def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation
false def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 2  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 12.80365
 mul } def /yUnit { 12.80365  mul } def convertStackTo2D end  /Lineto
/lineto load def 1  setlinejoin false   NArray n 0 eq not { n 1 eq
{ 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.75 SLW 0 0 0 
setrgbcolor  1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial
1437 4062 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 90.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -0.500000000000000000 8.0 0 1.0 mul /z ED 1.0 mul /y
ED 1 mul /x ED ConvertTo2D x2D y2D end   12.80365 mul exch 12.80365
mul exch  } false /N@temp@pstNode 10 {InitPnode } /NodeScale {} def
NewNode end  end
 1437 4062 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.75 SLW 0 0 0  setrgbcolor  end
 
@endspecial
1437 4062 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 1437 4062 a 1437 4062 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(keep ) def /Alpha 90.  def /Beta 30.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 1437 4062 a Fb(8)1472
4062 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 1472 4062 a 1437 4062 a
tx@Dict begin  PutEnd  end
 1437 4062 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.75 SLW 0 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 0 9.0 0.200000000000000000
0 9.0 -0.200000000000000000  tx@3DPlotDict begin   /RotX 0.  def /RotY
0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.
 def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def
/RotSequence (xyz ) def /RotSet (keep ) def /Alpha 90.  def /Beta 30.
 def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2
Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def
/Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true
def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation
false def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 2  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 12.80365
 mul } def /yUnit { 12.80365  mul } def convertStackTo2D end  /Lineto
/lineto load def 1  setlinejoin false   NArray n 0 eq not { n 1 eq
{ 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.75 SLW 0 0 0 
setrgbcolor  1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1437 4062 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 90.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -0.500000000000000000 9.0 0 1.0 mul /z ED 1.0 mul /y
ED 1 mul /x ED ConvertTo2D x2D y2D end   12.80365 mul exch 12.80365
mul exch  } false /N@temp@pstNode 10 {InitPnode } /NodeScale {} def
NewNode end  end
 1437 4062 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.75 SLW 0 0 0  setrgbcolor  end
 
@endspecial 1437 4062 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 1437 4062 a 1437
4062 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(keep ) def /Alpha 90.  def /Beta 30.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 1437 4062 a Fb(9)1472 4062 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 1472 4062 a 1437
4062 a
tx@Dict begin  PutEnd  end
 1437 4062 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.75 SLW 0 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 0 10.0 0.200000000000000000
0 10.0 -0.200000000000000000  tx@3DPlotDict begin   /RotX 0.  def /RotY
0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.
 def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def
/RotSequence (xyz ) def /RotSet (keep ) def /Alpha 90.  def /Beta 30.
 def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2
Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def
/Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true
def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation
false def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 2  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 12.80365
 mul } def /yUnit { 12.80365  mul } def convertStackTo2D end  /Lineto
/lineto load def 1  setlinejoin false   NArray n 0 eq not { n 1 eq
{ 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.75 SLW 0 0 0 
setrgbcolor  1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial
1437 4062 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 90.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -0.500000000000000000 10.0 0 1.0 mul /z ED 1.0 mul /y
ED 1 mul /x ED ConvertTo2D x2D y2D end   12.80365 mul exch 12.80365
mul exch  } false /N@temp@pstNode 10 {InitPnode } /NodeScale {} def
NewNode end  end
 1437 4062 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.75 SLW 0 0 0  setrgbcolor  end
 
@endspecial
1437 4062 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 1437 4062 a 1437 4062 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(keep ) def /Alpha 90.  def /Beta 30.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 1437 4062 a Fb(10)1507
4062 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 1507 4062 a 1437 4062 a
tx@Dict begin  PutEnd  end
 1437 4062 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.75 SLW 0 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 0 11.0 0.200000000000000000
0 11.0 -0.200000000000000000  tx@3DPlotDict begin   /RotX 0.  def /RotY
0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.
 def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def
/RotSequence (xyz ) def /RotSet (keep ) def /Alpha 90.  def /Beta 30.
 def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2
Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def
/Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true
def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation
false def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 2  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 12.80365
 mul } def /yUnit { 12.80365  mul } def convertStackTo2D end  /Lineto
/lineto load def 1  setlinejoin false   NArray n 0 eq not { n 1 eq
{ 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.75 SLW 0 0 0 
setrgbcolor  1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1437 4062 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 90.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -0.500000000000000000 11.0 0 1.0 mul /z ED 1.0 mul /y
ED 1 mul /x ED ConvertTo2D x2D y2D end   12.80365 mul exch 12.80365
mul exch  } false /N@temp@pstNode 10 {InitPnode } /NodeScale {} def
NewNode end  end
 1437 4062 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.75 SLW 0 0 0  setrgbcolor  end
 
@endspecial 1437 4062 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 1437 4062 a 1437
4062 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(keep ) def /Alpha 90.  def /Beta 30.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 1437 4062 a Fb(11)1507 4062 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 1507 4062 a 1437
4062 a
tx@Dict begin  PutEnd  end
 1437 4062 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.75 SLW 0 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 0 12.0 0.200000000000000000
0 12.0 -0.200000000000000000  tx@3DPlotDict begin   /RotX 0.  def /RotY
0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.
 def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def
/RotSequence (xyz ) def /RotSet (keep ) def /Alpha 90.  def /Beta 30.
 def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2
Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def
/Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true
def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation
false def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 2  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 12.80365
 mul } def /yUnit { 12.80365  mul } def convertStackTo2D end  /Lineto
/lineto load def 1  setlinejoin false   NArray n 0 eq not { n 1 eq
{ 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.75 SLW 0 0 0 
setrgbcolor  1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial
1437 4062 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 90.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -0.500000000000000000 12.0 0 1.0 mul /z ED 1.0 mul /y
ED 1 mul /x ED ConvertTo2D x2D y2D end   12.80365 mul exch 12.80365
mul exch  } false /N@temp@pstNode 10 {InitPnode } /NodeScale {} def
NewNode end  end
 1437 4062 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.75 SLW 0 0 0  setrgbcolor  end
 
@endspecial
1437 4062 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 1437 4062 a 1437 4062 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(keep ) def /Alpha 90.  def /Beta 30.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 1437 4062 a Fb(12)1507
4062 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 1507 4062 a 1437 4062 a
tx@Dict begin  PutEnd  end
 1437 4062 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.75 SLW 0 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 0 -1.0 0.200000000000000000
0 -1.0 -0.200000000000000000  tx@3DPlotDict begin   /RotX 0.  def /RotY
0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0.
 def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def
/RotSequence (xyz ) def /RotSet (keep ) def /Alpha 90.  def /Beta 30.
 def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2
Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def
/Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true
def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation
false def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 2  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 12.80365
 mul } def /yUnit { 12.80365  mul } def convertStackTo2D end  /Lineto
/lineto load def 1  setlinejoin false   NArray n 0 eq not { n 1 eq
{ 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.75 SLW 0 0 0 
setrgbcolor  1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1437 4062 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 90.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED -0.500000000000000000 -1.0 0 1.0 mul /z ED 1.0 mul /y
ED 1 mul /x ED ConvertTo2D x2D y2D end   12.80365 mul exch 12.80365
mul exch  } false /N@temp@pstNode 10 {InitPnode } /NodeScale {} def
NewNode end  end
 1437 4062 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.75 SLW 0 0 0  setrgbcolor  end
 
@endspecial 1437 4062 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 1437 4062 a 1437
4062 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(keep ) def /Alpha 90.  def /Beta 30.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 1437 4062 a Fb(-1)1495 4062 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 1495 4062 a 1437
4062 a
tx@Dict begin  PutEnd  end
 1437 4062 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.75 SLW 0 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 0 0.200000000000000000
1.0 0 -0.200000000000000000 1.0  tx@3DPlotDict begin   /RotX 0.  def
/RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec
0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0
def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 90.  def /Beta
30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def
/Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2
mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid
true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if
/eulerRotation false def RotSet (set ) eq currentdict /MnewTOold known
not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion def}
{RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion
def} {/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 2  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 12.80365
 mul } def /yUnit { 12.80365  mul } def convertStackTo2D end  /Lineto
/lineto load def 1  setlinejoin false   NArray n 0 eq not { n 1 eq
{ 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.75 SLW 0 0 0 
setrgbcolor  1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial
1437 4062 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 90.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -0.900000000000000000 1.0 1.0 mul /z ED 1.0 mul /y
ED 1 mul /x ED ConvertTo2D x2D y2D end   12.80365 mul exch 12.80365
mul exch  } false /N@temp@pstNode 10 {InitPnode } /NodeScale {} def
NewNode end  end
 1437 4062 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.75 SLW 0 0 0  setrgbcolor  end
 
@endspecial
1437 4062 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 1437 4062 a 1437 4062 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(keep ) def /Alpha 90.  def /Beta 30.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 1437 4062 a Fb(1)1472
4062 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 1472 4062 a 1437 4062 a
tx@Dict begin  PutEnd  end
 1437 4062 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.75 SLW 0 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 0 0.200000000000000000
2.0 0 -0.200000000000000000 2.0  tx@3DPlotDict begin   /RotX 0.  def
/RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec
0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0
def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 90.  def /Beta
30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def
/Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2
mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid
true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if
/eulerRotation false def RotSet (set ) eq currentdict /MnewTOold known
not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion def}
{RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion
def} {/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 2  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 12.80365
 mul } def /yUnit { 12.80365  mul } def convertStackTo2D end  /Lineto
/lineto load def 1  setlinejoin false   NArray n 0 eq not { n 1 eq
{ 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.75 SLW 0 0 0 
setrgbcolor  1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1437 4062 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 90.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -0.900000000000000000 2.0 1.0 mul /z ED 1.0 mul /y
ED 1 mul /x ED ConvertTo2D x2D y2D end   12.80365 mul exch 12.80365
mul exch  } false /N@temp@pstNode 10 {InitPnode } /NodeScale {} def
NewNode end  end
 1437 4062 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.75 SLW 0 0 0  setrgbcolor  end
 
@endspecial 1437 4062 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 1437 4062 a 1437
4062 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(keep ) def /Alpha 90.  def /Beta 30.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 1437 4062 a Fb(2)1472 4062 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 1472 4062 a 1437
4062 a
tx@Dict begin  PutEnd  end
 1437 4062 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.75 SLW 0 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 0 0.200000000000000000
3.0 0 -0.200000000000000000 3.0  tx@3DPlotDict begin   /RotX 0.  def
/RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec
0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0
def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 90.  def /Beta
30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def
/Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2
mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid
true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if
/eulerRotation false def RotSet (set ) eq currentdict /MnewTOold known
not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion def}
{RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion
def} {/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 2  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 12.80365
 mul } def /yUnit { 12.80365  mul } def convertStackTo2D end  /Lineto
/lineto load def 1  setlinejoin false   NArray n 0 eq not { n 1 eq
{ 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.75 SLW 0 0 0 
setrgbcolor  1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial
1437 4062 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 90.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -0.900000000000000000 3.0 1.0 mul /z ED 1.0 mul /y
ED 1 mul /x ED ConvertTo2D x2D y2D end   12.80365 mul exch 12.80365
mul exch  } false /N@temp@pstNode 10 {InitPnode } /NodeScale {} def
NewNode end  end
 1437 4062 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.75 SLW 0 0 0  setrgbcolor  end
 
@endspecial
1437 4062 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 1437 4062 a 1437 4062 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(keep ) def /Alpha 90.  def /Beta 30.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 1437 4062 a Fb(3)1472
4062 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 1472 4062 a 1437 4062 a
tx@Dict begin  PutEnd  end
 1437 4062 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.75 SLW 0 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 0 0.200000000000000000
4.0 0 -0.200000000000000000 4.0  tx@3DPlotDict begin   /RotX 0.  def
/RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec
0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0
def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 90.  def /Beta
30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def
/Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2
mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid
true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if
/eulerRotation false def RotSet (set ) eq currentdict /MnewTOold known
not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion def}
{RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion
def} {/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 2  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 12.80365
 mul } def /yUnit { 12.80365  mul } def convertStackTo2D end  /Lineto
/lineto load def 1  setlinejoin false   NArray n 0 eq not { n 1 eq
{ 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.75 SLW 0 0 0 
setrgbcolor  1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1437 4062 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 90.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -0.900000000000000000 4.0 1.0 mul /z ED 1.0 mul /y
ED 1 mul /x ED ConvertTo2D x2D y2D end   12.80365 mul exch 12.80365
mul exch  } false /N@temp@pstNode 10 {InitPnode } /NodeScale {} def
NewNode end  end
 1437 4062 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.75 SLW 0 0 0  setrgbcolor  end
 
@endspecial 1437 4062 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 1437 4062 a 1437
4062 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(keep ) def /Alpha 90.  def /Beta 30.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 1437 4062 a Fb(4)1472 4062 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 1472 4062 a 1437
4062 a
tx@Dict begin  PutEnd  end
 1437 4062 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.75 SLW 0 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 0 0.200000000000000000
5.0 0 -0.200000000000000000 5.0  tx@3DPlotDict begin   /RotX 0.  def
/RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec
0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0
def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 90.  def /Beta
30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def
/Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2
mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid
true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if
/eulerRotation false def RotSet (set ) eq currentdict /MnewTOold known
not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion def}
{RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion
def} {/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 2  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 12.80365
 mul } def /yUnit { 12.80365  mul } def convertStackTo2D end  /Lineto
/lineto load def 1  setlinejoin false   NArray n 0 eq not { n 1 eq
{ 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.75 SLW 0 0 0 
setrgbcolor  1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial
1437 4062 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 90.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -0.900000000000000000 5.0 1.0 mul /z ED 1.0 mul /y
ED 1 mul /x ED ConvertTo2D x2D y2D end   12.80365 mul exch 12.80365
mul exch  } false /N@temp@pstNode 10 {InitPnode } /NodeScale {} def
NewNode end  end
 1437 4062 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.75 SLW 0 0 0  setrgbcolor  end
 
@endspecial
1437 4062 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 1437 4062 a 1437 4062 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(keep ) def /Alpha 90.  def /Beta 30.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 1437 4062 a Fb(5)1472
4062 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 1472 4062 a 1437 4062 a
tx@Dict begin  PutEnd  end
 1437 4062 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.75 SLW 0 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 0 0.200000000000000000
6.0 0 -0.200000000000000000 6.0  tx@3DPlotDict begin   /RotX 0.  def
/RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec
0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0
def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 90.  def /Beta
30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def
/Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2
mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid
true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if
/eulerRotation false def RotSet (set ) eq currentdict /MnewTOold known
not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion def}
{RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion
def} {/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 2  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 12.80365
 mul } def /yUnit { 12.80365  mul } def convertStackTo2D end  /Lineto
/lineto load def 1  setlinejoin false   NArray n 0 eq not { n 1 eq
{ 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.75 SLW 0 0 0 
setrgbcolor  1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1437 4062 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 90.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -0.900000000000000000 6.0 1.0 mul /z ED 1.0 mul /y
ED 1 mul /x ED ConvertTo2D x2D y2D end   12.80365 mul exch 12.80365
mul exch  } false /N@temp@pstNode 10 {InitPnode } /NodeScale {} def
NewNode end  end
 1437 4062 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.75 SLW 0 0 0  setrgbcolor  end
 
@endspecial 1437 4062 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 1437 4062 a 1437
4062 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(keep ) def /Alpha 90.  def /Beta 30.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 1437 4062 a Fb(6)1472 4062 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 1472 4062 a 1437
4062 a
tx@Dict begin  PutEnd  end
 1437 4062 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.75 SLW 0 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 0 0.200000000000000000
7.0 0 -0.200000000000000000 7.0  tx@3DPlotDict begin   /RotX 0.  def
/RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec
0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0
def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 90.  def /Beta
30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def
/Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2
mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid
true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if
/eulerRotation false def RotSet (set ) eq currentdict /MnewTOold known
not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion def}
{RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion
def} {/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 2  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 12.80365
 mul } def /yUnit { 12.80365  mul } def convertStackTo2D end  /Lineto
/lineto load def 1  setlinejoin false   NArray n 0 eq not { n 1 eq
{ 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.75 SLW 0 0 0 
setrgbcolor  1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial
1437 4062 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 90.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -0.900000000000000000 7.0 1.0 mul /z ED 1.0 mul /y
ED 1 mul /x ED ConvertTo2D x2D y2D end   12.80365 mul exch 12.80365
mul exch  } false /N@temp@pstNode 10 {InitPnode } /NodeScale {} def
NewNode end  end
 1437 4062 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.75 SLW 0 0 0  setrgbcolor  end
 
@endspecial
1437 4062 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 1437 4062 a 1437 4062 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(keep ) def /Alpha 90.  def /Beta 30.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 1437 4062 a Fb(7)1472
4062 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 1472 4062 a 1437 4062 a
tx@Dict begin  PutEnd  end
 1437 4062 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.75 SLW 0 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 0 0.200000000000000000
8.0 0 -0.200000000000000000 8.0  tx@3DPlotDict begin   /RotX 0.  def
/RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec
0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0
def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 90.  def /Beta
30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def
/Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2
mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid
true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if
/eulerRotation false def RotSet (set ) eq currentdict /MnewTOold known
not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion def}
{RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion
def} {/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 2  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 12.80365
 mul } def /yUnit { 12.80365  mul } def convertStackTo2D end  /Lineto
/lineto load def 1  setlinejoin false   NArray n 0 eq not { n 1 eq
{ 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.75 SLW 0 0 0 
setrgbcolor  1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1437 4062 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 90.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -0.900000000000000000 8.0 1.0 mul /z ED 1.0 mul /y
ED 1 mul /x ED ConvertTo2D x2D y2D end   12.80365 mul exch 12.80365
mul exch  } false /N@temp@pstNode 10 {InitPnode } /NodeScale {} def
NewNode end  end
 1437 4062 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.75 SLW 0 0 0  setrgbcolor  end
 
@endspecial 1437 4062 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 1437 4062 a 1437
4062 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(keep ) def /Alpha 90.  def /Beta 30.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 1437 4062 a Fb(8)1472 4062 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 1472 4062 a 1437
4062 a
tx@Dict begin  PutEnd  end
 1437 4062 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.75 SLW 0 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 0 0.200000000000000000
9.0 0 -0.200000000000000000 9.0  tx@3DPlotDict begin   /RotX 0.  def
/RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec
0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0
def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 90.  def /Beta
30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def
/Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2
mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid
true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if
/eulerRotation false def RotSet (set ) eq currentdict /MnewTOold known
not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion def}
{RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion
def} {/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 2  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /dxUnit 1 def /dyUnit
1.0 def /dzUnit 1.0 def /SphericalCoor false def /xUnit { 12.80365
 mul } def /yUnit { 12.80365  mul } def convertStackTo2D end  /Lineto
/lineto load def 1  setlinejoin false   NArray n 0 eq not { n 1 eq
{ 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.75 SLW 0 0 0 
setrgbcolor  1. .setopacityalpha   1  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial
1437 4062 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 90.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -0.900000000000000000 9.0 1.0 mul /z ED 1.0 mul /y
ED 1 mul /x ED ConvertTo2D x2D y2D end   12.80365 mul exch 12.80365
mul exch  } false /N@temp@pstNode 10 {InitPnode } /NodeScale {} def
NewNode end  end
 1437 4062 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.75 SLW 0 0 0  setrgbcolor  end
 
@endspecial
1437 4062 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 1437 4062 a 1437 4062 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(keep ) def /Alpha 90.  def /Beta 30.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 1437 4062 a Fb(9)1472
4062 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 1472 4062 a 1437 4062 a
tx@Dict begin  PutEnd  end
 1437 4062 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.75 SLW 0 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 0 0.200000000000000000
10.0 0 -0.200000000000000000 10.0  tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 90.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /SphericalCoor
false def /xUnit { 12.80365  mul } def /yUnit { 12.80365  mul } def
convertStackTo2D end  /Lineto /lineto load def 1  setlinejoin false
  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5
2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.75 SLW 0 0 0  setrgbcolor  1. .setopacityalpha   1  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 1437 4062 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 90.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -0.900000000000000000 10.0 1.0 mul /z ED 1.0 mul /y
ED 1 mul /x ED ConvertTo2D x2D y2D end   12.80365 mul exch 12.80365
mul exch  } false /N@temp@pstNode 10 {InitPnode } /NodeScale {} def
NewNode end  end
 1437 4062 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.75 SLW 0 0 0  setrgbcolor  end
 
@endspecial 1437 4062 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 1437 4062 a 1437
4062 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(keep ) def /Alpha 90.  def /Beta 30.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 1437 4062 a Fb(10)1507 4062 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 1507 4062 a 1437
4062 a
tx@Dict begin  PutEnd  end
 1437 4062 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.75 SLW 0 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 0 0.200000000000000000
-1.0 0 -0.200000000000000000 -1.0  tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 90.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def /SphericalCoor
false def /xUnit { 12.80365  mul } def /yUnit { 12.80365  mul } def
convertStackTo2D end  /Lineto /lineto load def 1  setlinejoin false
  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5
2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.75 SLW 0 0 0  setrgbcolor  1. .setopacityalpha   1  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
1437 4062 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (keep ) def /Alpha 90.  def
/Beta 30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos
def /Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1
Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def
/showgrid true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict
begin} if /eulerRotation false def RotSet (set ) eq currentdict /MnewTOold
known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion
def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION
/ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION () def}
ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED 0 -0.900000000000000000 -1.0 1.0 mul /z ED 1.0 mul /y
ED 1 mul /x ED ConvertTo2D x2D y2D end   12.80365 mul exch 12.80365
mul exch  } false /N@temp@pstNode 10 {InitPnode } /NodeScale {} def
NewNode end  end
 1437 4062 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.75 SLW 0 0 0  setrgbcolor  end
 
@endspecial
1437 4062 a
tx@Dict begin { tx@NodeDict begin tx@NodeDict /N@temp@pstNode known
{ /N@temp@pstNode load GetCenter } { 0 0 } ifelse end } PutCoor PutBegin
 end
 1437 4062 a 1437 4062 a
tx@Dict begin { [ 1 0  /RotX 0.  def /RotY 0.  def /RotZ 0.  def /RotAngle
0.  def /xRotVec 1.  def /yRotVec 0.  def /zRotVec 0.  def /dxUnit
1 def /dyUnit 1.0 def /dzUnit 1.0 def /RotSequence (xyz ) def /RotSet
(keep ) def /Alpha 90.  def /Beta 30.  def /Sin1 Beta sin def /Sin2
Alpha sin def /Cos1 Beta cos def /Cos2 Alpha cos def /Cos1Sin2 Cos1
Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def /Cos1Cos2 Cos1 Cos2 mul def
/Sin1Cos2 Sin1 Cos2 mul def /showgrid true def currentdict tx@3DPlotDict
ne dup {tx@3DPlotDict begin} if /eulerRotation false def RotSet (set )
eq currentdict /MnewTOold known not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION
/SetMQuaternion def} {RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def
/PROCMQUATERNION /ConcatMQuaternion def} {/PROCMXYZ () def /PROCMQUATERNION
() def} ifelse } ifelse RotSequence (quaternion ) ne {PROCMXYZ} {PROCMQUATERNION}
ifelse cvx exec /RotSet (keep ) def {end} if /leftHanded false def
/coorType 2  def /SphericalCoorType 0  def 1 1 2  /zLight ED /yLight
ED /xLight ED /SignFlag 1 def /AlphaOffset 0 0 add def /Delta Beta
SignFlag mul sin Alpha SignFlag mul AlphaOffset add sin mul Alpha SignFlag
mul AlphaOffset add cos atan neg 90 add def /Gamma Beta SignFlag mul
sin Alpha SignFlag mul AlphaOffset add cos mul neg Alpha SignFlag mul
AlphaOffset add sin atan def Gamma rotate /Rho 90 Gamma sub def Rho
cos Rho sin 0 0 ] concat} tx@Dict /TMatrix known not { /TMatrix { }
def /RAngle { 0 } def } if /TMatrix [ TMatrix CM ] cvx def /cp [ currentpoint
] cvx def CM CP T STV CM matrix invertmatrix matrix concatmatrix exch
exec concat cp moveto  end
 1437 4062 a Fb(-1)1495
4062 y
tx@Dict begin CP /TMatrix [ TMatrix setmatrix ] cvx def moveto  end
 1495 4062 a 1437 4062 a
tx@Dict begin  PutEnd  end
 1437 4062 a 1437 4062
a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 135 def /Beta
30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def
/Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2
mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid
true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if
/eulerRotation false def RotSet (set ) eq currentdict /MnewTOold known
not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion def}
{RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion
def} {/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 2  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED 0 0 0 1.0 mul /z ED
1.0 mul /y ED 1 mul /x ED ConvertTo2D x2D y2D end   12.80365 mul exch
12.80365 mul exch  } false /N@A 10 {InitPnode } /NodeScale {} def NewNode
end  end
 1437 4062 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial
1437 4062 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 135 def /Beta
30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def
/Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2
mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid
true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if
/eulerRotation false def RotSet (set ) eq currentdict /MnewTOold known
not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion def}
{RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion
def} {/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 2  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED 8 0 0 1.0 mul /z ED
1.0 mul /y ED 1 mul /x ED ConvertTo2D x2D y2D end   12.80365 mul exch
12.80365 mul exch  } false /N@B 10 {InitPnode } /NodeScale {} def NewNode
end  end
 1437 4062 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial
1437 4062 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 135 def /Beta
30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def
/Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2
mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid
true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if
/eulerRotation false def RotSet (set ) eq currentdict /MnewTOold known
not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion def}
{RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion
def} {/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 2  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED 8 8 0 1.0 mul /z ED
1.0 mul /y ED 1 mul /x ED ConvertTo2D x2D y2D end   12.80365 mul exch
12.80365 mul exch  } false /N@C 10 {InitPnode } /NodeScale {} def NewNode
end  end
 1437 4062 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial
1437 4062 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 135 def /Beta
30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def
/Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2
mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid
true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if
/eulerRotation false def RotSet (set ) eq currentdict /MnewTOold known
not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion def}
{RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion
def} {/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 2  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED 0 8 0 1.0 mul /z ED
1.0 mul /y ED 1 mul /x ED ConvertTo2D x2D y2D end   12.80365 mul exch
12.80365 mul exch  } false /N@D 10 {InitPnode } /NodeScale {} def NewNode
end  end
 1437 4062 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial
1437 4062 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 135 def /Beta
30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def
/Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2
mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid
true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if
/eulerRotation false def RotSet (set ) eq currentdict /MnewTOold known
not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion def}
{RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion
def} {/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 2  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED 4 4 12 1.0 mul /z ED
1.0 mul /y ED 1 mul /x ED ConvertTo2D x2D y2D end   12.80365 mul exch
12.80365 mul exch  } false /N@S 10 {InitPnode } /NodeScale {} def NewNode
end  end
 1437 4062 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial
1437 4062 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 135 def /Beta
30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def
/Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2
mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid
true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if
/eulerRotation false def RotSet (set ) eq currentdict /MnewTOold known
not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion def}
{RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion
def} {/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 2  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED 4 4 0 1.0 mul /z ED
1.0 mul /y ED 1 mul /x ED ConvertTo2D x2D y2D end   12.80365 mul exch
12.80365 mul exch  } false /N@F 10 {InitPnode } /NodeScale {} def NewNode
end  end
 1437 4062 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial
1437 4062 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 135 def /Beta
30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def
/Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2
mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid
true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if
/eulerRotation false def RotSet (set ) eq currentdict /MnewTOold known
not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion def}
{RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion
def} {/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 2  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED 10 0  14 5 div 1.0 mul
/z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D x2D y2D end   12.80365
mul exch 12.80365 mul exch  } false /N@X 10 {InitPnode } /NodeScale
{} def NewNode end  end
 1437 4062 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial
1437 4062 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 135 def /Beta
30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def
/Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2
mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid
true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if
/eulerRotation false def RotSet (set ) eq currentdict /MnewTOold known
not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion def}
{RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion
def} {/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 2  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED 10 7 0 1.0 mul /z ED
1.0 mul /y ED 1 mul /x ED ConvertTo2D x2D y2D end   12.80365 mul exch
12.80365 mul exch  } false /N@XY 10 {InitPnode } /NodeScale {} def
NewNode end  end
 1437 4062 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial
1437 4062 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 135 def /Beta
30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def
/Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2
mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid
true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if
/eulerRotation false def RotSet (set ) eq currentdict /MnewTOold known
not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion def}
{RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion
def} {/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 2  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED 0 12 0 1.0 mul /z ED
1.0 mul /y ED 1 mul /x ED ConvertTo2D x2D y2D end   12.80365 mul exch
12.80365 mul exch  } false /N@Y 10 {InitPnode } /NodeScale {} def NewNode
end  end
 1437 4062 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial
1437 4062 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 135 def /Beta
30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def
/Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2
mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid
true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if
/eulerRotation false def RotSet (set ) eq currentdict /MnewTOold known
not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion def}
{RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion
def} {/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 2  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED 0 0 24 5 div 1.0 mul
/z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D x2D y2D end   12.80365
mul exch 12.80365 mul exch  } false /N@Z 10 {InitPnode } /NodeScale
{} def NewNode end  end
 1437 4062 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0 1  setrgbcolor  [ tx@NodeDict begin
tx@NodeDict /N@D known { /N@D load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@C known { /N@C load GetCenter } { 0 0 } ifelse
end tx@NodeDict begin tx@NodeDict /N@B known { /N@B load GetCenter
} { 0 0 } ifelse end tx@NodeDict begin tx@NodeDict /N@A known { /N@A
load GetCenter } { 0 0 } ifelse end  /Lineto /lineto load def 1  setlinejoin
false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop } repeat
}{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1
ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1
add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows { x11 y11 0.5
 1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos 0.  def /Length
x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x11 Alpha
cos ArrowPos mul add y11 Alpha sin ArrowPos mul add currentdict /ArrowInside
known { ArrowInside } if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1.  1 gt {1.0 1.  1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x12 x11 sub ArrowPos mul x11 add y12 y11
sub ArrowPos mul y11 add currentdict /ArrowInside known { ArrowInside
} if pop pop } repeat } ifelse pop pop Lineto } def n { 4 copy /y11
ED /x11 ED /y12 ED /x12 ED drawArrows } repeat x1 y1 x0 y0 6 4 roll
2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def drawArrows /y11 y0 def
/x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows pop pop closepath
} ifelse   gsave 0.5  setgray  0.5 .setopacityalpha  fill  grestore
gsave 0.8 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   1  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.0 SLW 0 0.392 0  setrgbcolor  [ tx@NodeDict
begin tx@NodeDict /N@Z known { /N@Z load GetCenter } { 0 0 } ifelse
end tx@NodeDict begin tx@NodeDict /N@Y known { /N@Y load GetCenter
} { 0 0 } ifelse end tx@NodeDict begin tx@NodeDict /N@XY known { /N@XY
load GetCenter } { 0 0 } ifelse end tx@NodeDict begin tx@NodeDict /N@X
known { /N@X load GetCenter } { 0 0 } ifelse end  /Lineto /lineto load
def 1  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt {
n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0
ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add
2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 1 0.648 0  setrgbcolor  0.5 .setopacityalpha
 fill  grestore gsave 1.0 SLW 0 0.392 0  setrgbcolor  1. .setopacityalpha
  1  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict /N@S
known { /N@S load GetCenter } { 0 0 } ifelse end tx@NodeDict begin
tx@NodeDict /N@A known { /N@A load GetCenter } { 0 0 } ifelse end 
 /Lineto /lineto load def 1  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup
1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1
ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha
cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n 1 sub
def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha
y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } repeat
}{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub
ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop
} repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def
n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave
1.0 SLW 0  setgray  1. .setopacityalpha   1  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict /N@S
known { /N@S load GetCenter } { 0 0 } ifelse end tx@NodeDict begin
tx@NodeDict /N@B known { /N@B load GetCenter } { 0 0 } ifelse end 
 /Lineto /lineto load def 1  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup
1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1
ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha
cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n 1 sub
def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha
y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } repeat
}{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub
ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop
} repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def
n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave
1.0 SLW 0  setgray  1. .setopacityalpha   1  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict /N@S
known { /N@S load GetCenter } { 0 0 } ifelse end tx@NodeDict begin
tx@NodeDict /N@C known { /N@C load GetCenter } { 0 0 } ifelse end 
 /Lineto /lineto load def 1  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup
1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1
ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha
cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n 1 sub
def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha
y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } repeat
}{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub
ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop
} repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def
n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave
1.0 SLW 0  setgray  1. .setopacityalpha   1  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ tx@NodeDict begin tx@NodeDict /N@S
known { /N@S load GetCenter } { 0 0 } ifelse end tx@NodeDict begin
tx@NodeDict /N@D known { /N@D load GetCenter } { 0 0 } ifelse end 
 /Lineto /lineto load def 1  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup
1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1
ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha
cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n 1 sub
def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha
y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs
def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos ArrowPos
mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop } repeat
}{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2 x1 sub
ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop
} repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2 sub def
n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop } if   gsave
1.0 SLW 0  setgray  1. .setopacityalpha   1  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0.392 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def   /RotX 0.  def /RotY 0.
 def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0. 
def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def
/RotSequence (xyz ) def /RotSet (set ) def /Alpha 135 def /Beta 30.
 def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2
Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def
/Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true
def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation
false def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 2  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /tMin .4 def /t tMin
def /t1 .5833333333 def /u 0 def /u1 0 def /dt t1 t sub 25 dup 1 gt
{ 1 sub div }{ pop pop 0 } ifelse def /du u1 u sub 1  dup 1 gt { 1
sub div }{ pop pop 0 } ifelse def /xyz { -24 t mul 24 add 0 24 5 div
t mul tx@3DPlotDict begin saveCoor ConvertTo2D x2D 12.80365 mul y2D
12.80365 mul end } def  1 { /t tMin def xyz moveto  /t t dt add def
25 1 sub { xyz  dup 1.e30 12.80365 mul gt { moveto } { dup -1.e30 12.80365
mul lt { moveto } { L } ifelse } ifelse  /t t dt add def } repeat /t
t dt sub def /u u du add def } repeat  gsave 0.8 SLW 0 0.392 0  setrgbcolor
 1. .setopacityalpha   0  setlinecap [  5.0  3.0  0.0  0.0 ] 0 0 add
 DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0 0.392 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def   /RotX 0.  def /RotY 0.
 def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def /yRotVec 0. 
def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit 1.0 def
/RotSequence (xyz ) def /RotSet (set ) def /Alpha 135 def /Beta 30.
 def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def /Cos2
Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2 mul def
/Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid true
def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if /eulerRotation
false def RotSet (set ) eq currentdict /MnewTOold known not or {/PROCMXYZ
/SetMxyz def /PROCMQUATERNION /SetMQuaternion def} {RotSet (concat )
eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion def}
{/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 2  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED /tMin .45 def /t tMin
def /t1 .5833333333 def /u 0 def /u1 0 def /dt t1 t sub 25 dup 1 gt
{ 1 sub div }{ pop pop 0 } ifelse def /du u1 u sub 1  dup 1 gt { 1
sub div }{ pop pop 0 } ifelse def /xyz { -24 t mul 24 add 12 t mul
0 tx@3DPlotDict begin saveCoor ConvertTo2D x2D 12.80365 mul y2D 12.80365
mul end } def  1 { /t tMin def xyz moveto  /t t dt add def 25 1 sub
{ xyz  dup 1.e30 12.80365 mul gt { moveto } { dup -1.e30 12.80365 mul
lt { moveto } { L } ifelse } ifelse  /t t dt add def } repeat /t t
dt sub def /u u du add def } repeat  gsave 0.8 SLW 0 0.392 0  setrgbcolor
 1. .setopacityalpha   0  setlinecap [  5.0  3.0  0.0  0.0 ] 0 0 add
 DashLine  grestore end
 
@endspecial 1437 4062 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 135 def /Beta
30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def
/Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2
mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid
true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if
/eulerRotation false def RotSet (set ) eq currentdict /MnewTOold known
not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion def}
{RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion
def} {/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 2  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED 4 3 div   4 3 div  4
1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D x2D y2D end   12.80365
mul exch 12.80365 mul exch  } false /N@SA 10 {InitPnode } /NodeScale
{} def NewNode end  end
 1437 4062 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 1.75 SLW 0  setgray  end
 
@endspecial 1437 4062 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 135 def /Beta
30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def
/Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2
mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid
true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if
/eulerRotation false def RotSet (set ) eq currentdict /MnewTOold known
not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion def}
{RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion
def} {/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 2  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED 7 1 3 1.0 mul /z ED
1.0 mul /y ED 1 mul /x ED ConvertTo2D x2D y2D end   12.80365 mul exch
12.80365 mul exch  } false /N@SB 10 {InitPnode } /NodeScale {} def
NewNode end  end
 1437 4062 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 1.75 SLW 0  setgray  end
 
@endspecial 1437 4062 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 135 def /Beta
30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def
/Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2
mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid
true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if
/eulerRotation false def RotSet (set ) eq currentdict /MnewTOold known
not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion def}
{RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion
def} {/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 2  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED 8 8 0 1.0 mul /z ED
1.0 mul /y ED 1 mul /x ED ConvertTo2D x2D y2D end   12.80365 mul exch
12.80365 mul exch  } false /N@SC 10 {InitPnode } /NodeScale {} def
NewNode end  end
 1437 4062 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 1.75 SLW 0  setgray  end
 
@endspecial 1437 4062 a
tx@Dict begin  tx@NodeDict begin { tx@3DPlotDict begin   /RotX 0. 
def /RotY 0.  def /RotZ 0.  def /RotAngle 0.  def /xRotVec 1.  def
/yRotVec 0.  def /zRotVec 0.  def /dxUnit 1 def /dyUnit 1.0 def /dzUnit
1.0 def /RotSequence (xyz ) def /RotSet (set ) def /Alpha 135 def /Beta
30.  def /Sin1 Beta sin def /Sin2 Alpha sin def /Cos1 Beta cos def
/Cos2 Alpha cos def /Cos1Sin2 Cos1 Sin2 mul def /Sin1Sin2 Sin1 Sin2
mul def /Cos1Cos2 Cos1 Cos2 mul def /Sin1Cos2 Sin1 Cos2 mul def /showgrid
true def currentdict tx@3DPlotDict ne dup {tx@3DPlotDict begin} if
/eulerRotation false def RotSet (set ) eq currentdict /MnewTOold known
not or {/PROCMXYZ /SetMxyz def /PROCMQUATERNION /SetMQuaternion def}
{RotSet (concat ) eq {/PROCMXYZ /ConcatMxyz def /PROCMQUATERNION /ConcatMQuaternion
def} {/PROCMXYZ () def /PROCMQUATERNION () def} ifelse } ifelse RotSequence
(quaternion ) ne {PROCMXYZ} {PROCMQUATERNION} ifelse cvx exec /RotSet
(keep ) def {end} if /leftHanded false def /coorType 2  def /SphericalCoorType
0  def 1 1 2  /zLight ED /yLight ED /xLight ED 4 7 div   52 7 div 
 12 7 div 1.0 mul /z ED 1.0 mul /y ED 1 mul /x ED ConvertTo2D x2D y2D
end   12.80365 mul exch 12.80365 mul exch  } false /N@SD 10 {InitPnode
} /NodeScale {} def NewNode end  end
 1437 4062 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 1.75 SLW 0  setgray  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.75 SLW 0  setgray  [ tx@NodeDict begin tx@NodeDict
/N@SD known { /N@SD load GetCenter } { 0 0 } ifelse end tx@NodeDict
begin tx@NodeDict /N@SC known { /N@SC load GetCenter } { 0 0 } ifelse
end tx@NodeDict begin tx@NodeDict /N@SB known { /N@SB load GetCenter
} { 0 0 } ifelse end tx@NodeDict begin tx@NodeDict /N@SA known { /N@SA
load GetCenter } { 0 0 } ifelse end  /Lineto /lineto load def 1  setlinejoin
false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop } repeat
}{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1
ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1
add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows { x11 y11 0.5
 1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos 0.  def /Length
x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos
ArrowPos dArrowPos add def ArrowPos Length gt { exit } if x11 Alpha
cos ArrowPos mul add y11 Alpha sin ArrowPos mul add currentdict /ArrowInside
known { ArrowInside } if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos
1.  1 gt {1.0 1.  1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x12 x11 sub ArrowPos mul x11 add y12 y11
sub ArrowPos mul y11 add currentdict /ArrowInside known { ArrowInside
} if pop pop } repeat } ifelse pop pop Lineto } def n { 4 copy /y11
ED /x11 ED /y12 ED /x12 ED drawArrows } repeat x1 y1 x0 y0 6 4 roll
2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def drawArrows /y11 y0 def
/x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows pop pop closepath
} ifelse   gsave 1.75 SLW 0  setgray  1. .setopacityalpha   1  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
0 TeXcolorgray 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
